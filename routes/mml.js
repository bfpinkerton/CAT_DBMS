/*
    ROUTING MODEL for MML
*/

const express = require('express');
const router = express.Router();
// const passport = require('passport');
const moment = require('moment');
const db = require("../models");

const multer = require('multer');
const upload = multer();
const open = require('open');

// User model
const User = db.users;
const Update = db.updates;
const MML = db.mml;
const ManagementCompany = db.managementCompany;
const GeneralInformation = db.generalInformation;
const BusinessInformation = db.businessInformation;
const OnSiteInformation = db.onSiteInformation;
const StaffInformation = db.staffInformation;
const HomeInformation = db.homeInformation;
const SocialMediaExtras = db.socialMediaExtras;
const Referrals = db.referrals;

// Ensure authenticated user is logged in
const {
    ensureAuthenticated
} = require('../config/auth');

// Ensure user does not have readOnly
const {
    ensureReadOnlyMML
} = require('../config/readOnlyMML');

// ------------------------------------------------------------------

// GET home page
router.get('/dashboard', ensureAuthenticated, async function (req, res, next) {
    req.flash('success', "Please choose a utility from the sidebar");
    res.locals.message = req.flash();
    req.app.locals.user = req.user;
    req.app.locals.listingMML = await MML.findAll(
        { plain: true }
    );
    res.render('pages/mml/dashboard', );
});

// GET create page
router.get('/create', ensureReadOnlyMML, async function (req, res, next) {
    req.app.locals.user = req.user;
    req.app.locals.date = moment().format('MMMM Do YYYY');
    res.render('pages/mml/create', );
});



// Create handle
// TODO: [Transactions] Force atomicity on this entire route.
router.post('/create', ensureReadOnlyMML, function (req, res, next) {
    var mmlID;
    // Create mml object
    var newEntry = {
        // --Metadata--
        // creation: AUTOGENERATED,
        originator: req.user.fName + " " + req.user.lName,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(newEntry)){
        if (newEntry[key] == '') {
            newEntry[key] = null;
        }
    }
    // Create MML entry with object data
    MML.create(newEntry)
                .then(data => {
                    // record entry ID
                    mmlID = data.id;

                    // updates.model.js -------------------------------------------------------------------------------------------------
                    // TODO: Uncomment and modify to support MMLs
                    /* const {
                        UpdateNote
                    } = req.body;
                    // update tracking JSON
                    updateTrackingJSON = {
                        "type":"CREATE",
                        "log": [
                            { "field":"", "before":"", "after":"" },
                        ]
                    }
                    // Record attributes
                    var entryUpdate = {
                        MALrelatedID: malID,
                        relatedTable: 'MAL',
                        updateAuthor: data.originator,
                        updateTracking: JSON.stringify(updateTrackingJSON),
                        updateNote: UpdateNote
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryUpdate)){
                        if (entryUpdate[key] == '') {
                            entryUpdate[key] = null;
                        }
                    }
                    // Create new update record
                    Update.create(entryUpdate)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *UPDATE* record not added.');
                        }); */

                    

                    // mml_ManagementCompany.model.js -----------------------------------------------------------------------------
                    const {
                        // View element values
                        ManagementMgmtCoID,
                        ManagementMgmtCoAssnSeminarNameTag,
                        ManagementCompanyType,
                    } = req.body;
                    // Record attributes and Replace all empty string values with NULL
                    var entryManagement = emptyStringToNull({
                        MMLrelatedID: mmlID,
                        mgmtCoID: ManagementMgmtCoID,
                        mgmtCoAssnSeminarNameTag: ManagementMgmtCoAssnSeminarNameTag,
                        companyType: ManagementCompanyType
                    });
                    // Create new ManagementCompany record
                    ManagementCompany.create(entryManagement)
                        .then(data1 => {
                            // Update MML entry with corresponding ManagementCompany table ID
                            MML.update(
                                {managementCompanyID: data1.id},
                                {where: {id:mmlID}}
                            )
                            .catch(err => {
                                console.log(err);
                                req.flash('failure','Failed to update MML entry\'s "managementCompanyID"');
                            });
                        })
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MML entry\'s *mml_ManagementCompany* record not added.');
                        });

                    

                    // mml_GeneralInformation.model.js -----------------------------------------------------------------------------
                    const {
                        // View element values
                        GeneralMktgStatus,
                        GeneralStatusCategory,
                        GeneralLicense,
                        GeneralLicenseNo,
                        GeneralLicenseDate,
                        GeneralTitle,
                        GeneralGender,
                        GeneralFirstName,
                        GeneralLastName,
                        GeneralOtherNames,
                        GeneralPreferredTitle,
                        GeneralDispositionTowardCM,
                    } = req.body;
                    // Record attributes and Replace all empty string values with NULL
                    var entryGeneral = emptyStringToNull({
                        MMLrelatedID: mmlID,
                        mktgStatus: GeneralMktgStatus,
                        statusCategory: GeneralStatusCategory,
                        license: GeneralLicense,
                        licenseNo: GeneralLicenseNo,
                        licenseDate: GeneralLicenseDate,
                        title: GeneralTitle,
                        gender: GeneralGender,
                        firstName: GeneralFirstName,
                        lastName: GeneralLastName,
                        otherNames: GeneralOtherNames,
                        preferredTitle: GeneralPreferredTitle,
                        dispositionTowardCM: GeneralDispositionTowardCM
                    });
                    // Create new GeneralInformation record
                    GeneralInformation.create(entryGeneral)
                        .then(data1 => {
                            // Update MML entry with corresponding GeneralInformation table ID
                            MML.update(
                                {generalInformationID: data1.id},
                                {where: {id:mmlID}}
                            )
                            .catch(err => {
                                console.log(err);
                                req.flash('failure','Failed to update MML entry\'s "generalInformationID"');
                            });
                        })
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MML entry\'s *mml_GeneralInformation* record not added.');
                        });
                    



                    // mml_BusinessInformation.model.js -----------------------------------------------------------------------------
                    const {
                        // View element values
                        BusinessWorkBranchAddress,
                        BusinessCity,
                        BusinessState,
                        BusinessZip,
                        BusinessCounty,
                        BusinessLandlinePhone,
                        BusinessExtension,
                        BusinessCellPhone,
                        BusinessFax,
                        BusinessTollFree,
                        BusinessWorkEmail,
                        BusinessWorkNotes,
                    } = req.body;
                    // Record attributes and Replace all empty string values with NULL
                    var entryBusiness = emptyStringToNull({
                        MMLrelatedID: mmlID,
                        workBranchAddress: BusinessWorkBranchAddress,
                        city: BusinessCity,
                        state: BusinessState,
                        zip: BusinessZip,
                        county: BusinessCounty,
                        landlinePhone: BusinessLandlinePhone,
                        extension: BusinessExtension,
                        cellPhone: BusinessCellPhone,
                        fax: BusinessFax,
                        tollFree: BusinessTollFree,
                        workEmail: BusinessWorkEmail,
                        workNotes: BusinessWorkNotes
                    });
                    // Create new BusinessInformation record
                    BusinessInformation.create(entryBusiness)
                        .then(data1 => {
                            // Update MML entry with corresponding BusinessInformation table ID
                            MML.update(
                                {businessInformationID: data1.id},
                                {where: {id:mmlID}}
                            )
                            .catch(err => {
                                console.log(err);
                                req.flash('failure','Failed to update MML entry\'s "businessInformationID"');
                            });
                        })
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MML entry\'s *mml_BusinessInformation* record not added.');
                        });



                    // mml_OnSiteInformation.model.js -----------------------------------------------------------------------------
                    const {
                        // View element values
                        OnSiteAddress,
                        OnSiteCity,
                        OnSiteState,
                        OnSiteZip,
                        OnSiteCounty,
                        OnSiteLandlinePhone,
                        OnSiteExtension,
                        OnSiteCellPhone,
                        OnSiteFax,
                        OnSiteTollFree,
                        OnSiteWorkEmail,
                        OnSiteWorkNotes,
                    } = req.body;
                    // Record attributes and Replace all empty string values with NULL
                    var entryOnSite = emptyStringToNull({
                        MMLrelatedID: mmlID,
                        address: OnSiteAddress,
                        city: OnSiteCity,
                        state: OnSiteState,
                        zip: OnSiteZip,
                        county: OnSiteCounty,
                        landlinePhone: OnSiteLandlinePhone,
                        extension: OnSiteExtension,
                        cellPhone: OnSiteCellPhone,
                        fax: OnSiteFax,
                        tollFree: OnSiteTollFree,
                        workEmail: OnSiteWorkEmail,
                        workNotes: OnSiteWorkNotes
                    });
                    // Create new OnSiteInformation record
                    OnSiteInformation.create(entryOnSite)
                        .then(data1 => {
                            // Update MML entry with corresponding OnSiteInformation table ID
                            MML.update(
                                {onSiteInformationID: data1.id},
                                {where: {id:mmlID}}
                            )
                            .catch(err => {
                                console.log(err);
                                req.flash('failure','Failed to update MML entry\'s "onSiteInformationID"');
                            });
                        })
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MML entry\'s *mml_OnSiteInformation* record not added.');
                        });



                    // mml_StaffInformation.model.js -----------------------------------------------------------------------------
                    const {
                        // View element values
                        StaffAssistantName,
                        StaffPhone,
                        StaffExtension,
                        StaffOnSiteAddress,
                        StaffCity,
                        StaffState,
                        StaffZip,
                        StaffCounty,
                        StaffLandlinePhone,
                        StaffLandlineExtension,
                        StaffCellPhone,
                        StaffFax,
                        StaffTollFree,
                        StaffOnSiteEmail,
                    } = req.body;
                    // Record attributes and Replace all empty string values with NULL
                    var entryStaff = emptyStringToNull({
                        MMLrelatedID: mmlID,
                        assistantName: StaffAssistantName,
                        phone: StaffPhone,
                        extension: StaffExtension,
                        onSiteAddress: StaffOnSiteAddress,
                        city: StaffCity,
                        state: StaffState,
                        zip: StaffZip,
                        county: StaffCounty,
                        landlinePhone: StaffLandlinePhone,
                        landlineExtension: StaffLandlineExtension,
                        cellPhone: StaffCellPhone,
                        fax: StaffFax,
                        tollFree: StaffTollFree,
                        onSiteEmail: StaffOnSiteEmail,
                    });
                    // Create new StaffInformation record
                    StaffInformation.create(entryStaff)
                        .then(data1 => {
                            // Update MML entry with corresponding StaffInformation table ID
                            MML.update(
                                {staffInformationID: data1.id},
                                {where: {id:mmlID}}
                            )
                            .catch(err => {
                                console.log(err);
                                req.flash('failure','Failed to update MML entry\'s "staffInformationID"');
                            });
                        })
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MML entry\'s *mml_StaffInformation* record not added.');
                        });



                    // mml_HomeInformation.model.js -----------------------------------------------------------------------------
                    // Record attributes
                    const {
                        // View element values
                        HomeMktgStatus,
                        HomeStatusCategory,
                        HomeAddress,
                        HomeCity,
                        HomeState,
                        HomeZip,
                        HomeCounty,
                        HomeEmailAddress,
                        HomeHomePhone,
                        HomeHomeNotes,
                    } = req.body;
                    // Record attributes and Replace all empty string values with NULL
                    var entryHome = emptyStringToNull({
                        MMLrelatedID: mmlID,
                        mktgStatus: HomeMktgStatus,
                        statusCategory: HomeStatusCategory,
                        address: HomeAddress,
                        city: HomeCity,
                        state: HomeState,
                        zip: HomeZip,
                        county: HomeCounty,
                        emailAddress: HomeEmailAddress,
                        homePhone: HomeHomePhone,
                        homeNotes: HomeHomeNotes
                    });
                    // Create new HomeInformation record
                    HomeInformation.create(entryHome)
                        .then(data1 => {
                            // Update MML entry with corresponding HomeInformation table ID
                            MML.update(
                                {homeInformationID: data1.id},
                                {where: {id:mmlID}}
                            )
                            .catch(err => {
                                console.log(err);
                                req.flash('failure','Failed to update MML entry\'s "homeInformationID"');
                            });
                        })
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MML entry\'s *mml_HomeInformation* record not added.');
                        });



                    // mml_SocialMediaExtras.model.js -----------------------------------------------------------------------------
                    const {
                        // View element values
                        SocialChristmasCard,
                        SocialBirthdayEmail,
                        SocialFacebookAuthorizationDate,
                        SocialNewsletterAuthorization,
                        SocialWillSendPhoto,
                        SocialPhotoFurnished,
                        SocialDeclinedAllBirthday,
                        SocialFollowCMOnFB,
                        SocialFollowUpFB,
                        SocialFollowedDateFB,
                        SocialFollowCMOnLI,
                        SocialFollowUpLI,
                        SocialFollowedDateLI,
                        SocialOfferedFollowAFS,
                        SocialFollowUpAFS,
                        SocialFollowedDateAFS,
                        SocialFacebook,
                        SocialLinkedIn,
                        SocialInstagram,
                        SocialTwitter,
                        SocialNone,
                    } = req.body;
                    // Record attributes and Replace all empty string values with NULL
                    var entrySocial = emptyStringToNull({
                        MMLrelatedID: mmlID,
                        christmasCard: SocialChristmasCard,
                        birthdayEmail: SocialBirthdayEmail,
                        facebookAuthorizationDate: SocialFacebookAuthorizationDate,
                        newsletterAuthorization: SocialNewsletterAuthorization,
                        willSendPhoto: SocialWillSendPhoto,
                        photoFurnished: SocialPhotoFurnished,
                        declinedAllBirthday: SocialDeclinedAllBirthday,
                        followCMOnFB: SocialFollowCMOnFB,
                        followUpFB: SocialFollowUpFB,
                        followedDateFB: SocialFollowedDateFB,
                        followCMOnLI: SocialFollowCMOnLI,
                        followUpLI: SocialFollowUpLI,
                        followedDateLI: SocialFollowedDateLI,
                        offeredFollowAFS: SocialOfferedFollowAFS,
                        followUpAFS: SocialFollowUpAFS,
                        followedDateAFS: SocialFollowedDateAFS,
                        facebook: SocialFacebook,
                        linkedIn: SocialLinkedIn,
                        instagram: SocialInstagram,
                        twitter: SocialTwitter,
                        none: SocialNone,
                    });
                    // Create new SocialMediaExtras record
                    SocialMediaExtras.create(entrySocial)
                        .then(data1 => {
                            // Update MML entry with corresponding SocialMediaExtras table ID
                            MML.update(
                                {socialMediaExtrasID: data1.id},
                                {where: {id:mmlID}}
                            )
                            .catch(err => {
                                console.log(err);
                                req.flash('failure','Failed to update MML entry\'s "socialMediaExtrasID"');
                            });
                        })
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MML entry\'s *mml_SocialMediaExtras* record not added.');
                        });



                    // --Seminars 2020 ????--
                    // TODO



                    // --Gifts--
                    // TODO



                    // --Law Firm Preferences--
                    // TODO



                    // --Associations Managed--
                    // TODO



                    // -- Referrals--
                    /*
                        - Table: "mml_Referrals.model.js"
                        - One to Many Association — Not able to associate both ways; ID not logged below
                    */
                   // mml_Referrals.model.js -------------------------------------------------------------------------------
                   const {
                        ReferralsReferralDate,
                        ReferralsStaff,
                        ReferralsDateEntered,
                        ReferralsMgmtCoName,
                        ReferralsOffice,
                        ReferralsLegalNameReferredAssociation,
                        ReferralsCounty,
                        ReferralsReferralTitle,
                        ReferralsReferralSource,
                        ReferralsStatus,
                        ReferralsGift,
                        ReferralsReferralPriority,
                        ReferralsReferralType,
                        ReferralsssociationWentTo,
                        ReferralsStaffInitials,
                        ReferralsDateClosed,
                        ReferralsNotes,
                    } = req.body;
                    // Record attributes and Replace all empty string values with NULL
                    var entryReferrals = emptyStringToNull({
                        MMLrelatedID: mmlID,
                        referralDate: ReferralsReferralDate,
                        staff: ReferralsStaff,
                        dateEntered: ReferralsDateEntered,
                        mgmtCoName: ReferralsMgmtCoName,
                        office: ReferralsOffice,
                        legalNameReferredAssociation: ReferralsLegalNameReferredAssociation,
                        county: ReferralsCounty,
                        referralTitle: ReferralsReferralTitle,
                        referralSource: ReferralsReferralSource,
                        status: ReferralsStatus,
                        gift: ReferralsGift,
                        referralPriority: ReferralsReferralPriority,
                        referralType: ReferralsReferralType,
                        associationWentTo: ReferralsssociationWentTo,
                        staffInitials: ReferralsStaffInitials,
                        dateClosed: ReferralsDateClosed,
                        notes: ReferralsNotes,
                    });
                    // Create new Referrals record
                    Referrals.create(entryReferrals)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MML entry\'s *mml_Referrals* record not added.');
                        });



                    // Final success code -------------------------------------------------------------------------------------------------
                    req.flash('success','New MML entry successfully added.');
                    res.locals.message = req.flash();
                    // mmlID is a variable that stores the ID of a record's ID
                    // What would be the correct syntax to pass the ID along?
                    res.redirect("../mml/entry/" + mmlID);
                })
                .catch(err => {
                    console.log(err);
                    req.flash('failure','New MML entry not added.');
                    res.locals.message = req.flash();
                    res.redirect("../mml/create");
                });

});



// Query specified table and return record * For One-to-Many associations
router.get('/retrieve/:table/:id', ensureAuthenticated, async function (req, res) {
    let record;
    switch (req.params.table) {
        /*case "Update" :
            record = await Update.findOne(
                {where: {id:req.params.id}},
                { plain: true }
            );
            break;*/
        // Seminars 2020 if One-to-Many??
        // TODO
        // Gifts if One-to-Many??
        // TODO
        // Law Firm Preferences if One-to-Many??
        // TODO
        case "Referrals" :
            record = await Referrals.findOne(
                {where: {id:req.params.id}},
                { plain: true }
            );
            break;
    }
    res.json(record);
});



// GET entry page * including all One-to-Ones and One-to-Manys * One-to-Manys also include "order" field
router.get('/entry/:id', ensureAuthenticated, async function (req, res, next) {
    req.app.locals.user = req.user;
    req.app.locals.date = moment().format('MMMM Do YYYY');
    const mmlID = req.params.id;
    // DB call to retrieve record
    req.app.locals.mml = await MML.findOne(
        {where: {id:mmlID}},
        { plain: true }
    );
    /*req.app.locals.update = await Update.findOne(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );*/
    req.app.locals.ManagementCompany = await ManagementCompany.findOne(
        {where: {MMLrelatedID: mmlID}},
        { plain: true }
    );
    req.app.locals.GeneralInformation = await GeneralInformation.findOne(
        {where: {MMLrelatedID: mmlID}},
        { plain: true }
    );
    req.app.locals.BusinessInformation = await BusinessInformation.findOne(
        {where: {MMLrelatedID: mmlID}},
        { plain: true }
    );
    req.app.locals.OnSiteInformation = await OnSiteInformation.findOne(
        {where: {MMLrelatedID: mmlID}},
        { plain: true }
    );
    req.app.locals.StaffInformation = await StaffInformation.findOne(
        {where: {MMLrelatedID: mmlID}},
        { plain: true }
    );
    req.app.locals.HomeInformation = await HomeInformation.findOne(
        {where: {MMLrelatedID: mmlID}},
        { plain: true }
    );
    req.app.locals.SocialMediaExtras = await SocialMediaExtras.findOne(
        {where: {MMLrelatedID: mmlID}},
        { plain: true }
    );
    // Seminars 2020
    // TODO
    // Gifts
    // TODO
    // Law Firm Preferences
    // TODO
    req.app.locals.AssociationsManaged = await AssociationsManaged.findOne(
        {where: {MMLrelatedID: mmlID}},
        { plain: true }
    );
    req.app.locals.Referrals = await Referrals.findAll(
        {where: {MMLrelatedID: mmlID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    res.render('pages/mml/entry', );
});
// ----------------------------------------------------------------------------------------

/*
    INDIVIDUAL TABLE POSTS (CREATES, UPDATES, & DELETE)
    - The below routes all pertain to creating, updating, or deleting a specified table's record
*/

// PARAMETERIZED DELETE
router.delete('/delete/:table/:id', (req, res) => {
    // TODO: DB Query

    req.flash('success', 'Record has been deleted.')
    res.locals.message = req.flash();
    res.redirect('../delete');
});



// One-to-One: Update
// One-to-Many: Create & Update

// Management Company Section ----------------------------------------------------------------------------------------------------
// Update MML Entry's Management Company
router.post('/entry/management/:MML_id/:Mgmt_id', ensureReadOnlyMML, async function (req, res, next) {
    // Update record and Replace all empty string values with NULL
    updateTable(ManagementCompany, 'ManagementCompany', req.params.Mgmt_id, res, req, emptyStringToNull({
        mgmtCoID: req.body.ManagementMgmtCoID,
        mgmtCoAssnSeminarNameTag: req.body.ManagementMgmtCoAssnSeminarNameTag,
        companyType: req.body.ManagementCompanyType
    }))
});

// Function to update a table's entry
async function updateTable(table, name, id, res, req, entry) {
    await table.update(entry, {where: {id: id}})
    .catch(err => {
        console.log(err);
        req.flash('failure', 'Failed to update MML entry\'s mml.' + name + '.model.js');
    });

    res.redirect("../../entry/" + req.params.MML_id);
}



// General Information Section ----------------------------------------------------------------------------------------------------
// Update MML Entry's General Information
router.post('/entry/general/:MML_id/:Gen_id', ensureReadOnlyMML, async function (req, res, next) {
    // Retrieve associated element values from page & structure them
    const {
        // View element values
        GeneralMktgStatus,
        GeneralStatusCategory,
        GeneralLicense,
        GeneralLicenseNo,
        GeneralLicenseDate,
        GeneralTitle,
        GeneralGender,
        GeneralFirstName,
        GeneralLastName,
        GeneralOtherNames,
        GeneralPreferredTitle,
        GeneralDispositionTowardCM,
        // Replace all empty string values with NULL
    } = emptyStringToNull(req.body);
    // Update MML entry with object data
    await GeneralInformation.update(
            {
                mktgStatus: GeneralMktgStatus,
                statusCategory: GeneralStatusCategory,
                license: GeneralLicense,
                licenseNo: GeneralLicenseNo,
                licenseDate: GeneralLicenseDate,
                title: GeneralTitle,
                gender: GeneralGender,
                firstName: GeneralFirstName,
                lastName: GeneralLastName,
                otherNames: GeneralOtherNames,
                preferredTitle: GeneralPreferredTitle,
                dispositionTowardCM: GeneralDispositionTowardCM},
            {where: {id: req.params.Gen_id}}
        )
        .catch(err => {
            console.log(err);
            req.flash('failure','Failed to update MML entry\'s mml.GeneralInformation.model.js');
        });

    res.redirect("../../entry/" + req.params.MML_id);
});



// Business Information Section ----------------------------------------------------------------------------------------------------
// Update MML Entry's Business Information
router.post('/entry/business/:MML_id/:Bus_id', ensureReadOnlyMML, async function (req, res, next) {
    // Retrieve associated element values from page & structure them
    const {
        // View element values
        BusinessWorkBranchAddress,
        BusinessCity,
        BusinessState,
        BusinessZip,
        BusinessCounty,
        BusinessLandlinePhone,
        BusinessExtension,
        BusinessCellPhone,
        BusinessFax,
        BusinessTollFree,
        BusinessWorkEmail,
        BusinessWorkNotes,
        // Replace all empty string values with NULL
    } = emptyStringToNull(req.body);
    // Update MML entry with object data
    await BusinessInformation.update(
            {
                workBranchAddress: BusinessWorkBranchAddress,
                city: BusinessCity,
                state: BusinessState,
                zip: BusinessZip,
                county: BusinessCounty,
                landlinePhone: BusinessLandlinePhone,
                extension: BusinessExtension,
                cellPhone: BusinessCellPhone,
                fax: BusinessFax,
                tollFree: BusinessTollFree,
                workEmail: BusinessWorkEmail,
                workNotes: BusinessWorkNotes},
            {where: {id: req.params.Bus_id}}
        )
        .catch(err => {
            console.log(err);
            req.flash('failure','Failed to update MML entry\'s mml.BusinessInformation.model.js');
        });

    res.redirect("../../entry/" + req.params.MML_id);
});



// OnSite Information Section ----------------------------------------------------------------------------------------------------
// Update MML Entry's Onsite Information
router.post('/entry/onsite/:MML_id/:Site_id', ensureReadOnlyMML, async function (req, res, next) {
    // Retrieve associated element values from page & structure them
    const {
        // View element values
        OnSiteAddress,
        OnSiteCity,
        OnSiteState,
        OnSiteZip,
        OnSiteCounty,
        OnSiteLandlinePhone,
        OnSiteExtension,
        OnSiteCellPhone,
        OnSiteFax,
        OnSiteTollFree,
        OnSiteWorkEmail,
        OnSiteWorkNotes,
        // Replace all empty string values with NULL
    } = emptyStringToNull(req.body);
    // Update MML entry with object data
    await OnSiteInformation.update(
            {
                address: OnSiteAddress,
                city: OnSiteCity,
                state: OnSiteState,
                zip: OnSiteZip,
                county: OnSiteCounty,
                landlinePhone: OnSiteLandlinePhone,
                extension: OnSiteExtension,
                cellPhone: OnSiteCellPhone,
                fax: OnSiteFax,
                tollFree: OnSiteTollFree,
                workEmail: OnSiteWorkEmail,
                workNotes: OnSiteWorkNotes},
            {where: {id: req.params.Site_id}}
        )
        .catch(err => {
            console.log(err);
            req.flash('failure','Failed to update MML entry\'s mml.OnSiteInformation.model.js');
        });

    res.redirect("../../entry/" + req.params.MML_id);
});



// Staff Information Section ----------------------------------------------------------------------------------------------------
// Update MML Entry's Staff Information
router.post('/entry/staff/:MML_id/:Staf_id', ensureReadOnlyMML, async function (req, res, next) {
    // Retrieve associated element values from page & structure them
    const {
        // View element values
        StaffAssistantName,
        StaffPhone,
        StaffExtension,
        StaffOnSiteAddress,
        StaffCity,
        StaffState,
        StaffZip,
        StaffCounty,
        StaffLandlinePhone,
        StaffLandlineExtension,
        StaffCellPhone,
        StaffFax,
        StaffTollFree,
        StaffOnSiteEmail,
        // Replace all empty string values with NULL
    } = emptyStringToNull(req.body);
    // Update MML entry with object data
    await StaffInformation.update(
            {
                assistantName: StaffAssistantName,
                phone: StaffPhone,
                extension: StaffExtension,
                onSiteAddress: StaffOnSiteAddress,
                city: StaffCity,
                state: StaffState,
                zip: StaffZip,
                county: StaffCounty,
                landlinePhone: StaffLandlinePhone,
                landlineExtension: StaffLandlineExtension,
                cellPhone: StaffCellPhone,
                fax: StaffFax,
                tollFree: StaffTollFree,
                onSiteEmail: StaffOnSiteEmail},
            {where: {id: req.params.Staf_id}}
        )
        .catch(err => {
            console.log(err);
            req.flash('failure','Failed to update MML entry\'s mml.StaffInformation.model.js');
        });

    res.redirect("../../entry/" + req.params.MML_id);
});



// Home Information Section ----------------------------------------------------------------------------------------------------
// Update MML Entry's Home Information
router.post('/entry/home/:MML_id/:Home_id', ensureReadOnlyMML, async function (req, res, next) {
    // Retrieve associated element values from page & structure them
    const {
        // View element values
        HomeMktgStatus,
        HomeStatusCategory,
        HomeAddress,
        HomeCity,
        HomeState,
        HomeZip,
        HomeCounty,
        HomeEmailAddress,
        HomeHomePhone,
        HomeHomeNotes,
        // Replace all empty string values with NULL
    } = emptyStringToNull(req.body);
    // Update MML entry with object data
    await HomeInformation.update(
            {
                mktgStatus: HomeMktgStatus,
                statusCategory: HomeStatusCategory,
                address: HomeAddress,
                city: HomeCity,
                state: HomeState,
                zip: HomeZip,
                county: HomeCounty,
                emailAddress: HomeEmailAddress,
                homePhone: HomeHomePhone,
                homeNotes: HomeHomeNotes},
            {where: {id: req.params.Home_id}}
        )
        .catch(err => {
            console.log(err);
            req.flash('failure','Failed to update MML entry\'s mml.HomeInformation.model.js');
        });

    res.redirect("../../entry/" + req.params.MML_id);
});



// SocialMediaExtras Section ----------------------------------------------------------------------------------------------------
// Update MML Entry's SocialMediaExtras
router.post('/entry/social/:MML_id/:Soc_id', ensureReadOnlyMML, async function (req, res, next) {
    // Retrieve associated element values from page & structure them
    const {
        // View element values
        SocialChristmasCard,
        SocialBirthdayEmail,
        SocialFacebookAuthorizationDate,
        SocialNewsletterAuthorization,
        SocialWillSendPhoto,
        SocialPhotoFurnished,
        SocialDeclinedAllBirthday,
        SocialFollowCMOnFB,
        SocialFollowUpFB,
        SocialFollowedDateFB,
        SocialFollowCMOnLI,
        SocialFollowUpLI,
        SocialFollowedDateLI,
        SocialOfferedFollowAFS,
        SocialFollowUpAFS,
        SocialFollowedDateAFS,
        SocialFacebook,
        SocialLinkedIn,
        SocialInstagram,
        SocialTwitter,
        SocialNone,
        // Replace all empty string values with NULL
    } = emptyStringToNull(req.body);
    // Update MML entry with object data
    await SocialMediaExtras.update(
            {
                christmasCard: SocialChristmasCard,
                birthdayEmail: SocialBirthdayEmail,
                facebookAuthorizationDate: SocialFacebookAuthorizationDate,
                newsletterAuthorization: SocialNewsletterAuthorization,
                willSendPhoto: SocialWillSendPhoto,
                photoFurnished: SocialPhotoFurnished,
                declinedAllBirthday: SocialDeclinedAllBirthday,
                followCMOnFB: SocialFollowCMOnFB,
                followUpFB: SocialFollowUpFB,
                followedDateFB: SocialFollowedDateFB,
                followCMOnLI: SocialFollowCMOnLI,
                followUpLI: SocialFollowUpLI,
                followedDateLI: SocialFollowedDateLI,
                offeredFollowAFS: SocialOfferedFollowAFS,
                followUpAFS: SocialFollowUpAFS,
                followedDateAFS: SocialFollowedDateAFS,
                facebook: SocialFacebook,
                linkedIn: SocialLinkedIn,
                instagram: SocialInstagram,
                twitter: SocialTwitter,
                none: SocialNone},
            {where: {id: req.params.Soc_id}}
        )
        .catch(err => {
            console.log(err);
            req.flash('failure','Failed to update MML entry\'s mml.SocialMediaExtras.model.js');
        });

    res.redirect("../../entry/" + req.params.MML_id);
});



// Seminars 2020 Section ----------------------------------------------------------------------------------------------------
// TODO

// Gifts Section Section ----------------------------------------------------------------------------------------------------
// TODO

// Law Firm Preferences Section ----------------------------------------------------------------------------------------------------
// TODO

// Associations Managed Section ----------------------------------------------------------------------------------------------------
// TODO



// Referrals Section ----------------------------------------------------------------------------------------------------
// Create MML Entry's Referrals
router.post('/create/referrals/:MML_id', ensureReadOnlyMML, function (req, res, next) {
    const {
        ReferralsReferralDate,
        ReferralsStaff,
        ReferralsDateEntered,
        ReferralsMgmtCoName,
        ReferralsOffice,
        ReferralsLegalNameReferredAssociation,
        ReferralsCounty,
        ReferralsReferralTitle,
        ReferralsReferralSource,
        ReferralsStatus,
        ReferralsGift,
        ReferralsReferralPriority,
        ReferralsReferralType,
        ReferralsAssociationWentTo,
        ReferralsStaffInitials,
        ReferralsDateClosed,
        ReferralsNotes,
    } = req.body;
    // Record attributes and Replace all empty string values with NULL
    var entryReferrals = emptyStringToNull({
        MMLrelatedID: req.params.MML_id,
        referralDate: ReferralsReferralDate,
        staff: ReferralsStaff,
        dateEntered: ReferralsDateEntered,
        mgmtCoName: ReferralsMgmtCoName,
        office: ReferralsOffice,
        legalNameReferredAssociation: ReferralsLegalNameReferredAssociation,
        county: ReferralsCounty,
        referralTitle: ReferralsReferralTitle,
        referralSource: ReferralsReferralSource,
        status: ReferralsStatus,
        gift: ReferralsGift,
        referralPriority: ReferralsReferralPriority,
        referralType: ReferralsReferralType,
        associationWentTo: ReferralsAssociationWentTo,
        staffInitials: ReferralsStaffInitials,
        dateClosed: ReferralsDateClosed,
        notes: ReferralsNotes
    });
    // Create new Referrals record
    Referrals.create(entryReferrals)
        .catch(err => {
            console.log(err);
            req.flash('failure','MML entry\'s *mml_Referrals* record not added.');
        });

    res.redirect("../../entry/" + req.params.MML_id);
});
// Update MML Entry's Referrals
router.post('/entry/referrals/:MML_id/:Ref_id', ensureReadOnlyMML, async function (req, res, next) {
    let {
        ReferralsReferralDate,
        ReferralsStaff,
        ReferralsDateEntered,
        ReferralsMgmtCoName,
        ReferralsOffice,
        ReferralsLegalNameReferredAssociation,
        ReferralsCounty,
        ReferralsReferralTitle,
        ReferralsReferralSource,
        ReferralsStatus,
        ReferralsGift,
        ReferralsReferralPriority,
        ReferralsReferralType,
        ReferralsAssociationWentTo,
        ReferralsStaffInitials,
        ReferralsDateClosed,
        ReferralsNotes,
        // Replace all empty string values with NULL
    } = emptyStringToNull(req.body);

    // Update MML entry with object data
    await Referrals.update(
        {
            referralDate: ReferralsReferralDate,
            staff: ReferralsStaff,
            dateEntered: ReferralsDateEntered,
            mgmtCoName: ReferralsMgmtCoName,
            office: ReferralsOffice,
            legalNameReferredAssociation: ReferralsLegalNameReferredAssociation,
            county: ReferralsCounty,
            referralTitle: ReferralsReferralTitle,
            referralSource: ReferralsReferralSource,
            status: ReferralsStatus,
            gift: ReferralsGift,
            referralPriority: ReferralsReferralPriority,
            referralType: ReferralsReferralType,
            associationWentTo: ReferralsAssociationWentTo,
            staffInitials: ReferralsStaffInitials,
            dateClosed: ReferralsDateClosed,
            notes: ReferralsNotes
        },
        {where: {id: req.params.Ref_id}}
    )
    .catch(err => {
        console.log(err);
        req.flash('failure','Failed to update MML entry\'s mal_Referrals.model.js');
    });

    res.redirect("../../entry/" + req.params.MML_id);
});



// --------------------------------------------------------------------------------------------------------------------------------------------------------
// Function to replace empty strings with null
//      Specifically avoids booleans, since a false value was getting replaced with null
function emptyStringToNull(entry) {
    // Replace all empty string values with NULL
    for (let key of Object.keys(entry)){
        if (typeof entry[key] != "boolean" && entry[key] == '') {
            entry[key] = null;
        }
    }
    return entry;
}



module.exports = router;