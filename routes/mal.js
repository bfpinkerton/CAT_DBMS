/*
    ROUTING MODEL for MAL
*/

const express = require('express');
const router = express.Router();
// const passport = require('passport');
const moment = require('moment');
const db = require("../models");

const multer = require('multer');
const upload = multer();
const open = require('open');


// User model
const User = db.users;
const MAL = db.mal;
const Update = db.updates;
const SupplementalAssociationInfo = db.supplementalAssociationInfo;
const GeneralBoardInfo = db.generalBoardInfo;
const RepresentationInquiries = db.representationInquiries;
const MerchandiseMug = db.merchandiseMug;
const MerchandiseFloridaStatue = db.merchandiseFloridaStatue;
const SocialMedia = db.socialMedia;
const HiringRecord = db.hiringRecord;
const TerminationRecord = db.terminationRecord;
const ReferralSource = db.referralSource;
const ReferralMgmtCoVendor = db.referralMgmtCoVendor;
const Presentations = db.presentations;
const PotentialClientReports = db.potentialClientReports;

// Ensure authenticated user is logged in
const {
    ensureAuthenticated
} = require('../config/auth');

// Ensure user does not have readOnly
const {
    ensureReadOnlyMAL
} = require('../config/readOnlyMAL');

// ------------------------------------------------------------------

// GET home page
router.get('/dashboard', ensureAuthenticated, async function (req, res, next) {
    req.flash('success', "Please choose an action from the top menu");
    res.locals.message = req.flash();
    req.app.locals.user = req.user;
    res.render('pages/mal/dashboard', );
});

// GET create page
router.get('/create', ensureReadOnlyMAL, async function (req, res, next) {
    req.app.locals.user = req.user;
    req.app.locals.date = moment().format('MMMM Do YYYY');
    res.render('pages/mal/create', );
});

// Create handle
/*
    - Couple of notes below:
    - I know this code is a mess but I've tried my best to document it the best way possible and record which chunks post to which table
    - Please know this code is intentional and should flow logically based on how elements appear on the associated view
    - All create statements execute inside of the original mal.model.js create .then block
    - To prevent HTML element naming collisions, element names will usually contain a 'header' such as general, supplemental, social, etc.
        - This is intentional, and while ugly, does the job
    - To prevent database datatype storage errors, ALL element values are parsed
        - If an element's value is '', it is replaced with null
        - //// IMPORTANT: Dates are parsed based on if 'date' (case-insensitive) is in the name
            - //// If substring 'date' is found within key, the value is either left as null OR converted to appropriate database DATEONLY value through 'databaseDate' function found at the bottom of this file
            - //// This means only variables that store DATEONLY values should use 'date' in their respective names
    - Transactions: Either all records are successfully created or none of them are; Maybe a try block
*/
// TODO: [Transactions] Force atomicity on this entire route.
router.post('/create', ensureReadOnlyMAL, function (req, res, next) {
    var malID;
    // Retrieve associated element valuesfrom page & structure them
    const {
        // --Primary Association Information--
        LegalName,
        Aka,
        ClientAcctNum,
        FileName,
        StatusInFirm,
        SpecialClassification,
        AsscType,
        ScndMHPAssc,
        DomicileCounty,
        DomicileCity,
        DomicileZip,
        // --Association Photo--
        AssociationPhoto
    } = req.body;
    // Create mal object
    var newEntry = {
        // --Metadata--
        // creation: AUTOGENERATED,
        originator: req.user.fName + " " + req.user.lName,
        // --Primary Association Information--
        legalName: LegalName,
        aka: Aka,
        clientAcctNum: ClientAcctNum,
        fileName: FileName,
        statusInFirm: StatusInFirm,
        specialClassification: SpecialClassification,
        asscType: AsscType,
        scndMHPAssc: ScndMHPAssc,
        domicileCounty: DomicileCounty,
        domicileCity: DomicileCity,
        domicileZip: DomicileZip,
        // --Association Photo--
        associationPhoto: AssociationPhoto,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(newEntry)){
        if (newEntry[key] == '') {
            newEntry[key] = null;
        }
    }
    // Create MAL entry with object data
    MAL.create(newEntry)
                .then(data => {
                    // record entry ID
                    malID = data.id;

                    // updates.model.js -------------------------------------------------------------------------------------------------
                    const {
                        UpdateNote
                    } = req.body;
                    // update tracking JSON
                    updateTrackingJSON = {
                        "type":"CREATE",
                        "log": [
                            { "field":"", "before":"", "after":"" },
                        ]
                    }
                    // Record attributes
                    var entryUpdate = {
                        MALrelatedID: malID,
                        relatedTable: 'MAL',
                        updateAuthor: data.originator,
                        updateTracking: JSON.stringify(updateTrackingJSON),
                        updateNote: UpdateNote
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryUpdate)){
                        if (entryUpdate[key] == '') {
                            entryUpdate[key] = null;
                        }
                    }
                    // Create new update record
                    Update.create(entryUpdate)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *UPDATE* record not added.');
                        });



                    // mal_SupplementalAssociationInfo.model.js -----------------------------------------------------------------------------

                    const {
                        // View element values
                        SupplementalDesignatedSiteAddress,
                        SupplementalCity,
                        SupplementalZipCode,
                        SupplementalPhoneNumber,
                        SupplementalAssociationWebsite,
                        SupplementalAssociationEmail,
                        SupplementalNumberUnitsLotsDeveloped,
                        SupplementalCommunity55Plus,
                        SupplementalAssociationControlledBy,
                        SupplementalApproxTurnoverDate,
                        SupplementalMasterOrSub,
                        SupplementalSubAssociations,
                        SupplementalMasterAssociation,
                        SupplementalRegisteredAgent,
                        SupplementalDateRA,
                        SupplementalClubhouse,
                        SupplementalAssessments,
                        SupplementalWhatIntervals,
                        SupplementalAvailableToRent,
                        SupplementalPrice,
                        SupplementalTheaterSeatingAmount,
                        SupplementalTableChairsAmount,
                        SupplementalTypeOfTables,
                        SupplementalAdditionalNotes,
                    } = req.body;
                    // Record attributes
                    var entrySupplemental = {
                        MALrelatedID: malID,
                        designatedSiteAddress: SupplementalDesignatedSiteAddress,
                        city: SupplementalCity,
                        zipCode: SupplementalZipCode,
                        phoneNumber: SupplementalPhoneNumber,
                        associationWebsite: SupplementalAssociationWebsite,
                        associationEmail: SupplementalAssociationEmail,
                        numberUnitsLotsDeveloped: SupplementalNumberUnitsLotsDeveloped,
                        community55Plus: SupplementalCommunity55Plus,
                        associationControlledBy: SupplementalAssociationControlledBy,
                        approxTurnoverDate: SupplementalApproxTurnoverDate,
                        masterOrSub: SupplementalMasterOrSub,
                        subAssociations: SupplementalSubAssociations,
                        masterAssociation: SupplementalMasterAssociation,
                        registeredAgent: SupplementalRegisteredAgent,
                        dateRA: SupplementalDateRA,
                        clubhouse: SupplementalClubhouse,
                        assessments: SupplementalAssessments,
                        whatIntervals: SupplementalWhatIntervals,
                        availableToRent: SupplementalAvailableToRent,
                        price: SupplementalPrice,
                        theaterSeatingAmount: SupplementalTheaterSeatingAmount,
                        tableChairsAmount: SupplementalTableChairsAmount,
                        typeOfTables: SupplementalTypeOfTables,
                        additionalNotes: SupplementalAdditionalNotes
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entrySupplemental)){
                        if (entrySupplemental[key] == '') {
                            entrySupplemental[key] = null;
                        }
                    }
                    // Create new SupplementalAssociationInfo record
                    SupplementalAssociationInfo.create(entrySupplemental)
                        .then(data1 => {
                            // Update MAL entry with corresponding SupplementalAssociationInfo table ID
                            MAL.update(
                                {supplementalAssociationInfoID: data1.id},
                                {where: {id:malID}}
                            )
                            .catch(err => {
                                console.log(err);
                                req.flash('failure','Failed to update MAL entry\'s "supplementalAssociationInfoID"');
                            });
                        })
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_SupplementalAssociationInfo* record not added.');
                        });



                    // mal_GeneralBoardInfo.model.js --------------------------------------------------------------------------------------
                    const {
                        GeneralCorporateStatus,
                        GeneralAnnualMeetingMonth,
                        GeneralLastCorporateReportDate,
                        GeneralCurrentBoardExpirationDate,
                        GeneralAssociationSeminarAdmittandance,
                        GeneralAssociationSeminarTagColor,
                        GeneralNumberDirectorsFullyStaffed,
                        GeneralDateAssociationUpdatedWhole,
                    } = req.body;
                    //
                    var entryGeneralBoard = {
                        MALrelatedID: malID,
                        corporateStatus: GeneralCorporateStatus,
                        annualMeetingMonth: GeneralAnnualMeetingMonth,
                        lastCorporateReportDate: GeneralLastCorporateReportDate,
                        currentBoardExpirationDate: GeneralCurrentBoardExpirationDate,
                        associationSeminarAdmittandance: GeneralAssociationSeminarAdmittandance,
                        associationSeminarTagColor: GeneralAssociationSeminarTagColor,
                        numberDirectorsFullyStaffed: GeneralNumberDirectorsFullyStaffed,
                        dateAssociationUpdatedWhole: GeneralDateAssociationUpdatedWhole,
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryGeneralBoard)){
                        if (entryGeneralBoard[key] == '') {
                            entryGeneralBoard[key] = null;
                        }
                    }
                    // Create new update record
                    GeneralBoardInfo.create(entryGeneralBoard)
                        .then(data1 => {
                            // Update MAL entry with corresponding update table ID
                            MAL.update(
                                {generalBoardTableID: data1.id},
                                {where: {id:malID}}
                            )
                            .catch(err => {
                                console.log(err);
                                req.flash('failure','Failed to update MAL entry\'s "supplementalAssociationInfoID"');
                            });
                        })
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_SupplementalAssociationInfo* record not added.');
                        });



                    // mal_RepresentationInquiries.model.js -------------------------------------------------------------------------------
                    const {
                        RepresentCmServicesRequest,
                        RepresentOriginationSource,
                        RepresentCmSponsored,
                        RepresentSource,
                        RepresentDateRequested,
                    } = req.body;
                    //
                    var entryRepresentationInq = {
                        MALrelatedID: malID,
                        cmServicesRequest: RepresentCmServicesRequest,
                        originationSource: RepresentOriginationSource,
                        cmSponsored: RepresentCmSponsored,
                        source: RepresentSource,
                        dateRequested: RepresentDateRequested
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryRepresentationInq)){
                        if (entryRepresentationInq[key] == '') {
                            entryRepresentationInq[key] = null;
                        }
                    }
                    // Create new update record
                    RepresentationInquiries.create(entryRepresentationInq)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_RepresentationInquiries* record not added.');
                        });



                    // mal_MerchandiseMug.model.js ----------------------------------------------------------------------------------------
                    const {
                        MugPurchaseStatus,
                        MugOriginationSaleSource,
                        MugDatePurchased,
                        MugQuantity,
                        MugDeliveryMethod,
                        MugPaymentMethod,
                        MugCheckNumber,
                    } = req.body;
                    //
                    var entryMugPurchase = {
                        MALrelatedID: malID,
                        mugPurchaseStatus: MugPurchaseStatus,
                        originationSaleSource: MugOriginationSaleSource,
                        datePurchased: MugDatePurchased,
                        quantity: MugQuantity,
                        deliveryMethod: MugDeliveryMethod,
                        paymentMethod: MugPaymentMethod,
                        checkNumber: MugCheckNumber,
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryMugPurchase)){
                        if (entryMugPurchase[key] == '') {
                            entryMugPurchase[key] = null;
                        }
                    }
                    // Create new update record
                    MerchandiseMug.create(entryMugPurchase)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_MerchandiseMug* record not added.');
                        });



                    // mal_MerchandiseFloridaStatue.model.js ------------------------------------------------------------------------------
                    const {
                        StatueStatusPurchase,
                        StatueRequestedDate,
                        StatueQuantity,
                        StatueWhichBook,
                        StatueReferralSource,
                        StatueReferralSourceOther,
                        StatueSoldBy,
                        StatueDeliveryMethod,
                        StatuePaymentMethod,
                        StatueCheckNumber,
                    } = req.body;
                    //
                    var entryFloridaStatue = {
                        MALrelatedID: malID,
                        statuePurchaseStatus:StatueStatusPurchase,
                        dateRequested:StatueRequestedDate,
                        quantity:StatueQuantity,
                        whichBook:StatueWhichBook,
                        referralSource:StatueReferralSource,
                        referralSourceOther:StatueReferralSourceOther,
                        soldBy:StatueSoldBy,
                        deliveryMethod:StatueDeliveryMethod,
                        paymentMethod:StatuePaymentMethod,
                        checkNumber:StatueCheckNumber,
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryFloridaStatue)){
                        if (entryFloridaStatue[key] == '') {
                            entryFloridaStatue[key] = null;
                        }
                    }
                    // Create new update record
                    MerchandiseFloridaStatue.create(entryFloridaStatue)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_SupplementalAssociationInfo* record not added.');
                        });



                    // mal_SocialMedia.model.js -------------------------------------------------------------------------------------------
                    const {
                        SocialNoSocialMedia,
                        SocialHasFacebook,
                        SocialFacebookAccount,
                        SocialFacebookDate,
                        SocialHasLinkedin,
                        SocialLinkedinAccount,
                        SocialLinkedinDate,
                        SocialHasTwitter,
                        SocialTwitterAccount,
                        SocialTwitterDate,
                        SocialHasInstagram,
                        SocialInstagramAccount,
                        SocialInstagramDate,
                    } = req.body;

                    var entrySocial = {
                        MALrelatedID: malID,
                        noSocialMedia:SocialNoSocialMedia,
                        hasFacebook:SocialHasFacebook,
                        facebookAccount:SocialFacebookAccount,
                        facebookDate:SocialFacebookDate,
                        hasLinkedin:SocialHasLinkedin,
                        linkedinAccount:SocialLinkedinAccount,
                        linkedinDate:SocialLinkedinDate,
                        hasTwitter:SocialHasTwitter,
                        twitterAccount:SocialTwitterAccount,
                        twitterDate:SocialTwitterDate,
                        hasInstagram:SocialHasInstagram,
                        instagramAccount:SocialInstagramAccount,
                        instagramDate:SocialInstagramDate,

                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entrySocial)){
                        if (entrySocial[key] == '') {
                            entrySocial[key] = null;
                        }
                    }
                    // Create new update record
                    SocialMedia.create(entrySocial)
                        .then(data1 => {
                            // Update MAL entry with corresponding update table ID
                            MAL.update(
                                {socialMediaID: data1.id},
                                {where: {id:malID}}
                            )
                            .catch(err => {
                                console.log(err);
                                req.flash('failure','Failed to update MAL entry\'s "socialMediaID"');
                            });
                        })
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_SocialMedia* record not added.');
                        });


                    // mal_HiringRecord.model.js ------------------------------------------------------------------------------------------
                    const {
                        HiringDateHired,
                        HiringReasonsHired,
                        HiringComments,
                        HiringTypeofRepresentation,
                        HiringDate,
                        HiringSourceOfReferralName,
                        HiringPosition,
                        HiringCompanyAssociation,
                        HiringPrimaryFirm,
                        HiringOtherFirms,
                        HiringForWhatPurpose,
                        HiringFormerFirm,
                    } = req.body;
                    //
                    var entryHiring = {
                        MALrelatedID: malID,
                        dateHired:HiringDateHired,
                        reasonsHired:HiringReasonsHired,
                        hiringComments:HiringComments,
                        typeofRepresentation:HiringTypeofRepresentation,
                        date:HiringDate,
                        sourceOfReferralName:HiringSourceOfReferralName,
                        position:HiringPosition,
                        companyAssociation:HiringCompanyAssociation,
                        primaryFirm:HiringPrimaryFirm,
                        otherFirms:HiringOtherFirms,
                        forWhatPurpose:HiringForWhatPurpose,
                        formerFirm:HiringFormerFirm,
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryHiring)){
                        if (entryHiring[key] == '') {
                            entryHiring[key] = null;
                        }
                    }
                    // Create new update record
                    HiringRecord.create(entryHiring)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_HiringRecord* record not added.');
                        });


                    // mal_TerminationRecord.model.js -------------------------------------------------------------------------------------
                    const {
                        TerminationDateTerminated,
                        TerminationReasonTerminated,
                        TerminationRevenueGenerated,
                        TerminationTerminatingNotes,
                        TerminationOrigin,
                        TerminationRealReasonTerminated,
                    } = req.body;
                    //
                    var entryTermination = {
                        MALrelatedID: malID,
                        dateTerminated:TerminationDateTerminated,
                        reasonTerminated:TerminationReasonTerminated,
                        revenueGenerated:TerminationRevenueGenerated,
                        terminatingNotes:TerminationTerminatingNotes,
                        terminationOrigin:TerminationOrigin,
                        realReasonTerminated:TerminationRealReasonTerminated,
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryTermination)){
                        if (entryTermination[key] == '') {
                            entryTermination[key] = null;
                        }
                    }
                    // Create new update record
                    TerminationRecord.create(entryTermination)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_TerminationRecord* record not added.');
                        });


                    // mal_ReferralSource.model.js ----------------------------------------------------------------------------------------
                    const {
                        SourceDate,
                        SourceReferredBy,
                        SourcePosition,
                        SourceCompany,
                        SourceIfOrganizationMeeting,
                    } = req.body;
                    //
                    var entryRefSource = {
                        MALrelatedID: malID,
                        date:SourceDate,
                        referredBy:SourceReferredBy,
                        position:SourcePosition,
                        company:SourceCompany,
                        ifOrganizationMeeting:SourceIfOrganizationMeeting,
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryRefSource)){
                        if (entryRefSource[key] == '') {
                            entryRefSource[key] = null;
                        }
                    }
                    // Create new update record
                    ReferralSource.create(entryRefSource)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_ReferralSource* record not added.');
                        });


                    // mal_ReferralMgmtCoVendor.model.js ----------------------------------------------------------------------------------
                    const {
                        MgmtRequestDate,
                        MgmtRequestedBy,
                        MgmtTitle,
                        MgmtForWhatBusiness,
                    } = req.body;
                    //
                    var entryRefMgmt = {
                        MALrelatedID: malID,
                        requestDate:MgmtRequestDate,
                        requestedBy:MgmtRequestedBy,
                        title:MgmtTitle,
                        forWhatBusiness:MgmtForWhatBusiness,
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryRefMgmt)){
                        if (entryRefMgmt[key] == '') {
                            entryRefMgmt[key] = null;
                        }
                    }
                    // Create new update record
                    ReferralMgmtCoVendor.create(entryRefMgmt)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_ReferralMgmtCoVendor* record not added.');
                        });


                    // mal_Presentations.model.js -----------------------------------------------------------------------------------------
                    const {
                        PresentationDate,
                        PresentationRequestedBy,
                        PresentationPosition,
                        PresentationPrimaryAttorney,
                        PresentationStaffMemberAttending,
                        PresentationLocation,
                        PresentationMgmtCoAndOffice,
                        PresentationMethod,
                        PresentationWhoAttendedFromAssociation,
                        PresentationIssuesDiscussed,
                        PresentationTotalPresentationTime,
                        PresentationOutcome,
                        PresentationHired,
                        PresentationReasonsFirmSelected,
                    } = req.body;
                      //
                    var entryPresentation = {
                        MALrelatedID: malID,
                        date:PresentationDate,
                        requestedBy:PresentationRequestedBy,
                        position:PresentationPosition,
                        primaryAttorney:PresentationPrimaryAttorney,
                        staffMemberAttending:PresentationStaffMemberAttending,
                        location:PresentationLocation,
                        mgmtCoAndOffice:PresentationMgmtCoAndOffice,
                        method:PresentationMethod,
                        whoAttendedFromAssociation:PresentationWhoAttendedFromAssociation,
                        issuesDiscussed:PresentationIssuesDiscussed,
                        totalPresentationTime:PresentationTotalPresentationTime,
                        outcome:PresentationOutcome,
                        hired:PresentationHired,
                        reasonsFirmSelected:PresentationReasonsFirmSelected,
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryPresentation)){
                        if (entryPresentation[key] == '') {
                            entryPresentation[key] = null;
                        }
                    }
                    // Create new update record
                    Presentations.create(entryPresentation)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_Presentations* record not added.');
                        });


                    // mal_PotentialClientReports.model.js --------------------------------------------------------------------------------
                    const {
                        PotentialOriginationDatePC,
                        PotentialStaffInitialsPC,
                        PotentialStaffAssignedPC,
                        PotentialNewestEventDate,
                        PotentialStaffInitialsEvent,
                        PotentialFollowUpType,
                        PotentialNextFollowUpDate,
                        PotentialStaffInitialsFollowUp,
                        PotentialFileType,
                        PotentialFileDate,
                        PotentialContactName,
                        PotentialPosition,
                        PotentialPhoneNumber,
                        PotentialExtension,
                        PotentialInfoNote,
                        PotentialCurrentLegalCouncil,
                        PotentialOtherFirmsConsidered,
                        PotentialReasonForLeavingCurrent,
                        PotentialBestAspectCurrent,
                        PotentialDecisionExpected,
                        PotentialDecisionBasis,
                        PotentialSincereRequest3rdParty,
                        PotentialCMNotifiedOnDecision,
                        PotentialCurrentFirmSelection,
                        PotentialAssociationHeardCM,
                        PotentialWhatEvent,
                        PotentialPackageTypeRequested,
                        PotentialCopyToName,
                        PotentialTitle,
                        PotentialMgmtCo,
                        PotentialCopyDate,
                        PotentialEventsChain,
                        PotentialChainDate,
                        PotentialChainOriginator,
                        PotentialChainInitials,
                        PotentialChainInputDate,
                        PotentialEntryTotalTime,
                        PotentialEntryNotes,
                        PotentialFileClosingStatus,
                        PotentialFileClosingDate,
                        PotentialFileRemoveAfter,
                        PotentialClosedFileStatus,
                        PotentialStartingRoundDate,
                        PotentialEndingDate,
                        PotentialClosingDate,
                        PotentialSpentTotalTime,
                        PotentialFirmSelected,
                        PotentialFirmSelectedOtherWhy,
                        PotentialOtherFirmAdditionalReasons,
                        PotentialClosingLetter,
                        PotentialFinalStaffThoughts,
                    } = req.body;
                    //
                    var entryPotential = {
                        MALrelatedID: malID,
                        originationDatePC:PotentialOriginationDatePC,
                        staffInitialsPC:PotentialStaffInitialsPC,
                        staffAssignedPC:PotentialStaffAssignedPC,
                        newestEventDate:PotentialNewestEventDate,
                        staffInitialsEvent:PotentialStaffInitialsEvent,
                        followUpType:PotentialFollowUpType,
                        nextFollowUpDate:PotentialNextFollowUpDate,
                        staffInitialsFollowUp:PotentialStaffInitialsFollowUp,
                        fileType:PotentialFileType,
                        fileDate:PotentialFileDate,
                        contactName:PotentialContactName,
                        position:PotentialPosition,
                        phoneNumber:PotentialPhoneNumber,
                        extension:PotentialExtension,
                        infoNote:PotentialInfoNote,
                        currentLegalCouncil:PotentialCurrentLegalCouncil,
                        otherFirmsConsidered:PotentialOtherFirmsConsidered,
                        reasonForLeavingCurrent:PotentialReasonForLeavingCurrent,
                        bestAspectCurrent:PotentialBestAspectCurrent,
                        decisionExpected:PotentialDecisionExpected,
                        decisionBasis:PotentialDecisionBasis,
                        sincereRequest3rdParty:PotentialSincereRequest3rdParty,
                        CMNotifiedOnDecision:PotentialCMNotifiedOnDecision,
                        currentFirmSelection:PotentialCurrentFirmSelection,
                        associationHeardCM:PotentialAssociationHeardCM,
                        whatEvent:PotentialWhatEvent,
                        packageTypeRequested:PotentialPackageTypeRequested,
                        copyToName:PotentialCopyToName,
                        title:PotentialTitle,
                        mgmtCo:PotentialMgmtCo,
                        copyDate:PotentialCopyDate,
                        eventsChain:PotentialEventsChain,
                        chainDate:PotentialChainDate,
                        chainOriginator:PotentialChainOriginator,
                        chainInitials:PotentialChainInitials,
                        chainInputDate:PotentialChainInputDate,
                        entryTotalTime:PotentialEntryTotalTime,
                        entryNotes:PotentialEntryNotes,
                        fileClosingStatus:PotentialFileClosingStatus,
                        fileClosingDate:PotentialFileClosingDate,
                        fileRemoveAfter:PotentialFileRemoveAfter,
                        closedFileStatus:PotentialClosedFileStatus,
                        startingRoundDate:PotentialStartingRoundDate,
                        endingDate:PotentialEndingDate,
                        closingDate:PotentialClosingDate,
                        spentTotalTime:PotentialSpentTotalTime,
                        firmSelected:PotentialFirmSelected,
                        firmSelectedOtherWhy:PotentialFirmSelectedOtherWhy,
                        otherFirmAdditionalReasons:PotentialOtherFirmAdditionalReasons,
                        closingLetter:PotentialClosingLetter,
                        finalStaffThoughts:PotentialFinalStaffThoughts,
                    };
                    // Replace all empty string values with NULL
                    for (let key of Object.keys(entryPotential)){
                        if (entryPotential[key] == '') {
                            entryPotential[key] = null;
                        }
                    }
                    // Create new update record
                    PotentialClientReports.create(entryPotential)
                        .catch(err => {
                            console.log(err);
                            req.flash('failure','New MAL entry\'s *mal_PotentialClientReports* record not added.');
                        });



                    // Final success code -------------------------------------------------------------------------------------------------
                    req.flash('success','New MAL entry successfully added.');
                    res.locals.message = req.flash();
                    // malID is a variable that stores the ID of a record's ID
                    // What would be the correct syntax to pass the ID along?
                    res.redirect("../mal/entry/" + malID);
                })
                .catch(err => {
                    console.log(err);
                    req.flash('failure','New MAL entry not added.');
                    res.locals.message = req.flash();
                    res.redirect("../mal/create");
                });

});













// Query specified table and return record
router.get('/retrieve/:table/:id', ensureAuthenticated, async function (req, res) {
    let record;
    switch (req.params.table) {
        case "Update" :
            record = await Update.findOne(
                {where: {id:req.params.id}},
                { plain: true }
            );
            break;
        case "RepresentationInquiries" :
            record = await RepresentationInquiries.findOne(
                {where: {id:req.params.id}},
                { plain: true }
            );
            break;
        case "MerchandiseMug" :
            record = await Update.findOne(
                {where: {id:req.params.id}},
                { plain: true }
            );
            break;
        case "MerchandiseFloridaStatue" :
            record = await Update.findOne(
                {where: {id:req.params.id}},
                { plain: true }
            );
            break;
        case "HiringRecord" :
            record = await Update.findOne(
                {where: {id:req.params.id}},
                { plain: true }
            );
            break;
        case "TerminationRecord" :
            record = await Update.findOne(
                {where: {id:req.params.id}},
                { plain: true }
            );
            break;
        case "ReferralSource" :
            record = await Update.findOne(
                {where: {id:req.params.id}},
                { plain: true }
            );
            break;
        case "ReferralMgmtCoVendor" :
                record = await Update.findOne(
                    {where: {id:req.params.id}},
                    { plain: true }
                );
                break;
        case "Presentations" :
                record = await Update.findOne(
                    {where: {id:req.params.id}},
                    { plain: true }
                );
                break;
        case "PotentialClientReports" :
            record = await Update.findOne(
                {where: {id:req.params.id}},
                { plain: true }
            );
            break;
    }
    res.json(record);
});



// GET entry page
router.get('/entry/:id', ensureAuthenticated, async function (req, res, next) {
    req.app.locals.user = req.user;
    req.app.locals.date = moment().format('MMMM Do YYYY');
    const malID = req.params.id;
    // DB call to retrieve record
    req.app.locals.mal = await MAL.findOne(
        {where: {id:malID}},
        { plain: true }
    );
    req.app.locals.update = await Update.findOne(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    req.app.locals.SupplementalAssociationInfo = await SupplementalAssociationInfo.findOne(
        {where: {MALrelatedID:malID}},
        { plain: true }
    );
    // TODO: Indiv Board Members
    //
    req.app.locals.GeneralBoardInfo = await GeneralBoardInfo.findOne(
        {where: {MALrelatedID:malID}},
        { plain: true }
    );
    req.app.locals.RepresentationInquiries = await RepresentationInquiries.findAll(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    req.app.locals.MerchandiseMug = await MerchandiseMug.findAll(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    req.app.locals.MerchandiseFloridaStatue = await MerchandiseFloridaStatue.findAll(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    req.app.locals.SocialMedia = await SocialMedia.findOne(
        {where: {MALrelatedID:malID}},
        { plain: true }
    );
    // TODO: Manager Information
    //
    req.app.locals.HiringRecord = await HiringRecord.findAll(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    req.app.locals.TerminationRecord = await TerminationRecord.findAll(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    req.app.locals.ReferralSource = await ReferralSource.findAll(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    req.app.locals.ReferralMgmtCoVendor = await ReferralMgmtCoVendor.findAll(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    req.app.locals.Presentations = await Presentations.findAll(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    req.app.locals.PotentialClientReports = await PotentialClientReports.findAll(
        {where: {MALrelatedID:malID}},
        {order: ['id','ASC']},
        { plain: true }
    );
    res.render('pages/mal/entry', );
});
// ----------------------------------------------------------------------------------------

/*
    INDIVIDUAL TABLE POSTS (CREATES, UPDATES, & DELETE)
    - The below routes all pertain to creating, updating, or deleting a specified table's record
*/

// PARAMETERIZED DELETE
router.delete('/delete/:table/:id', (req, res) => {
    // TODO: DB Query

    req.flash('success', 'Record has been deleted.')
    res.locals.message = req.flash();
    res.redirect('../delete');
});



// Primary Information Section ----------------------------------------------------------------------------------------------------
// Update MAL Entry's Primary Association Information
router.post('/entry/primary/:id', upload.array(), ensureReadOnlyMAL, async function (req, res, next) {
    // Retrieve associated element values from page & structure them
    const {
        Aka, ClientAcctNum, FileName, StatusInFirm, SpecialClassification, AsscType, ScndMHPAssc, DomicileCounty, DomicileCity, DomicileZip, LegalName, AssociationPhoto
    } = req.body;
    // Update MAL entry with object data
    await MAL.update(
            {legalName: LegalName,
                aka: Aka,
                clientAcctNum: ClientAcctNum,
                fileName: FileName,
                statusInFirm: StatusInFirm,
                specialClassification: SpecialClassification,
                asscType: AsscType,
                scndMHPAssc: ScndMHPAssc,
                domicileCounty: DomicileCounty,
                domicileCity: DomicileCity,
                domicileZip: DomicileZip,
                // --Association Photo--
                associationPhoto: AssociationPhoto
            },
            {where: {id:req.params.id}}

        )
        .catch(err => {
            console.log(err);
            req.flash('failure','Failed to update MAL entry\'s mal.model.js');
        });

    res.redirect("../../entry/" + req.params.id);
});



// Supplemental Information Section ----------------------------------------------------------------------------------------------------
// Update MAL Entry's mal_SupplementalAssociationInfo
router.post('/entry/supplemental/:MAL_id/:id', ensureReadOnlyMAL, async function (req, res, next) {
    // Retrieve associated element values from page & structure them
    const {
        SupplementalDesignatedSiteAddress,
        SupplementalCity,
        SupplementalZipCode,
        SupplementalPhoneNumber,
        SupplementalAssociationWebsite,
        SupplementalAssociationEmail,
        SupplementalNumberUnitsLotsDeveloped,
        SupplementalCommunity55Plus,
        SupplementalAssociationControlledBy,
        SupplementalApproxTurnoverDate,
        SupplementalMasterOrSub,
        SupplementalSubAssociations,
        SupplementalMasterAssociation,
        SupplementalRegisteredAgent,
        SupplementalDateRA,
        SupplementalClubhouse,
        SupplementalAssessments,
        SupplementalWhatIntervals,
        SupplementalAvailableToRent,
        SupplementalPrice,
        SupplementalTheaterSeatingAmount,
        SupplementalTableChairsAmount,
        SupplementalTypeOfTables,
        SupplementalAdditionalNotes,
    } = req.body;
    // Update MAL entry with object data
    await SupplementalAssociationInfo.update(
            {
                designatedSiteAddress: SupplementalDesignatedSiteAddress,
                city: SupplementalCity,
                zipCode: SupplementalZipCode,
                phoneNumber: SupplementalPhoneNumber,
                associationWebsite: SupplementalAssociationWebsite,
                associationEmail: SupplementalAssociationEmail,
                numberUnitsLotsDeveloped: SupplementalNumberUnitsLotsDeveloped,
                community55Plus: SupplementalCommunity55Plus,
                associationControlledBy: SupplementalAssociationControlledBy,
                approxTurnoverDate: SupplementalApproxTurnoverDate,
                masterOrSub: SupplementalMasterOrSub,
                subAssociations: SupplementalSubAssociations,
                masterAssociation: SupplementalMasterAssociation,
                registeredAgent: SupplementalRegisteredAgent,
                dateRA: SupplementalDateRA,
                clubhouse: SupplementalClubhouse,
                assessments: SupplementalAssessments,
                whatIntervals: SupplementalWhatIntervals,
                availableToRent: SupplementalAvailableToRent,
                price: SupplementalPrice,
                theaterSeatingAmount: SupplementalTheaterSeatingAmount,
                tableChairsAmount: SupplementalTableChairsAmount,
                typeOfTables: SupplementalTypeOfTables,
                additionalNotes: SupplementalAdditionalNotes},
            {where: {id:req.params.id}}
        )
        .catch(err => {
            console.log(err);
            req.flash('failure','Failed to update MAL entry\'s mal.model.js');
        });

    res.redirect("../../../../mal/entry/" + req.params.MAL_id);
});



// General Board Member Information Section ----------------------------------------------------------------------------------------------------
// Update MAL Entry's General Board Member Related Information
router.post('/entry/general/:id', upload.array(), ensureReadOnlyMAL, async function (req, res, next) {
    // Retrieve associated element values from page & structure them
    const {
        GeneralCorporateStatus,GeneralAnnualMeetingMonth,GeneralLastCorporateReportDate,GeneralCurrentBoardExpirationDate,GeneralAssociationSeminarAdmittandance,GeneralAssociationSeminarTagColor,GeneralNumberDirectorsFullyStaffed,GeneralDateAssociationUpdatedWhole
    } = req.body;
    // Update MAL entry with object data
    await GeneralBoardInfo.update(
            {
                corporateStatus: GeneralCorporateStatus,
                annualMeetingMonth: GeneralAnnualMeetingMonth,
                lastCorporateReportDate: GeneralLastCorporateReportDate,
                currentBoardExpirationDate: GeneralCurrentBoardExpirationDate,
                associationSeminarAdmittandance: GeneralAssociationSeminarAdmittandance,
                associationSeminarTagColor: GeneralAssociationSeminarTagColor,
                numberDirectorsFullyStaffed: GeneralNumberDirectorsFullyStaffed,
                dateAssociationUpdatedWhole: GeneralDateAssociationUpdatedWhole,
            },
            {where: {id:req.params.id}}

        )
        .catch(err => {
            console.log(err);
            req.flash('failure','Failed to update MAL entry\'s mal_GeneralBoardInfo.model.js');
        });

    res.redirect("../../entry/" + req.params.id);
});



// Individual Board Members Section --------------------------------------
// Create MAL Entry's Individual Board Member Information
// TODO
// Update MAL Entry's Individual Board Member Information
// TODO

// Create MAL Entry's Board Member Seminar Information
// TODO
// Update MAL MAL Entry's Board Member Seminar Information
// TODO

// Create MAL Entry's Board Member Organization Information
// TODO
// Update MAL MAL Entry's Board Member Organization Information
// TODO

// Create MAL Entry's Board Member Gifts
// TODO
// Update MAL MAL Entry's Board Member Gifts
// TODO

// Create MAL Entry's Board Member Birthdays
// TODO
// Update MAL MAL Entry's Board Member Birthdays
// TODO

// Create MAL Entry's Board Member Contests
// TODO
// Update MAL MAL Entry's Board Member Contests
// TODO



// Representation Inquiries Section --------------------------------------
// Create MAL Entry's Representation Inquiry
router.post('/create/representation/:MAL_id', ensureReadOnlyMAL, function (req, res, next) {
    // Replace empty string values with null
    for (var key in req.body) {
        if (req.body[key] == '') {
            req.body[key] = null;
        }
    }
    const {
        RepresentCmServicesRequest,RepresentOriginationSource,RepresentCmSponsored,RepresentSource,RepresentDateRequested,
    } = req.body;
    //
    var entryRepresentationInq = {
        MALrelatedID: req.params.MAL_id,
        cmServicesRequest: RepresentCmServicesRequest,
        originationSource: RepresentOriginationSource,
        cmSponsored: RepresentCmSponsored,
        source: RepresentSource,
        dateRequested: RepresentDateRequested
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryRepresentationInq)){
        if (entryRepresentationInq[key] == '') {
            entryRepresentationInq[key] = null;
        }
    }
    // Create new update record
    RepresentationInquiries.create(entryRepresentationInq)
        .catch(err => {
            console.log(err);
            req.flash('failure','MAL entry\'s *mal_RepresentationInquiries* record not added.');
        });

    res.redirect("../../entry/" + req.params.MAL_id);
});
// Update MAL MAL Entry's Representation Information
router.post('/entry/representation/:MAL_id/:Rep_id', ensureReadOnlyMAL, async function (req, res, next) {
    let {
        RepresentCmServicesRequest,RepresentOriginationSource,RepresentCmSponsored,RepresentSource,RepresentDateRequested,
    } = req.body;

    // Replace all empty string values with NULL
    for (let key of Object.keys(req.body)){
        if (req.body[key] == '') {
            req.body[key] = null;
        }
    }
    // Update MAL entry with object data
    await RepresentationInquiries.update(
        {
            cmServicesRequest: RepresentCmServicesRequest,
            originationSource: RepresentOriginationSource,
            cmSponsored: RepresentCmSponsored,
            source: RepresentSource,
            dateRequested: RepresentDateRequested
        },
        {where: {id:req.params.Rep_id}}
    )
    .catch(err => {
        console.log(err);
        req.flash('failure','Failed to update MAL entry\'s mal_RepresentationInquiries.model.js');
    });

    res.redirect("../../../entry/" + req.params.MAL_id);
});



// Merchandise Section --------------------------------------
// Create MAL Entry's Mug Purchase
router.post('/create/mug/:MAL_id', ensureReadOnlyMAL, function (req, res, next) {
    const {
        MugPurchaseStatus,
        MugOriginationSaleSource,
        MugDatePurchased,
        MugQuantity,
        MugDeliveryMethod,
        MugPaymentMethod,
        MugCheckNumber,
    } = req.body;
    //
    var entryMugPurchase = {
        MALrelatedID: req.params.MAL_id,
        mugPurchaseStatus: MugPurchaseStatus,
        originationSaleSource: MugOriginationSaleSource,
        datePurchased: MugDatePurchased,
        quantity: MugQuantity,
        deliveryMethod: MugDeliveryMethod,
        paymentMethod: MugPaymentMethod,
        checkNumber: MugCheckNumber,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryMugPurchase)){
        if (entryMugPurchase[key] == '') {
            entryMugPurchase[key] = null;
        }
    }
    // Create new update record
    MerchandiseMug.create(entryMugPurchase)
        .catch(err => {
            console.log(err);
            req.flash('failure','New MAL entry\'s *mal_MerchandiseMug* record not added.');
        });

    res.redirect("../../entry/" + req.params.MAL_id);
});
// Update MAL Entry's Mug Purchase
router.post('/entry/mug/:MAL_id/:Mug_id', ensureReadOnlyMAL, async function (req, res, next) {
    const {
        MugPurchaseStatus,
        MugOriginationSaleSource,
        MugDatePurchased,
        MugQuantity,
        MugDeliveryMethod,
        MugPaymentMethod,
        MugCheckNumber,
    } = req.body;
    //
    var entryMugPurchase = {
        mugPurchaseStatus: MugPurchaseStatus,
        originationSaleSource: MugOriginationSaleSource,
        datePurchased: MugDatePurchased,
        quantity: MugQuantity,
        deliveryMethod: MugDeliveryMethod,
        paymentMethod: MugPaymentMethod,
        checkNumber: MugCheckNumber,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryMugPurchase)){
        if (entryMugPurchase[key] == '') {
            entryMugPurchase[key] = null;
        }
    }
    // update record
    await MerchandiseMug.update(entryMugPurchase, {where: {id:req.params.Mug_id}})
        .catch(err => {
            console.log(err);
            req.flash('failure','Update MAL entry\'s *mal_MerchandiseMug* record failed.');
        });

    res.redirect("../../entry/" + req.params.MAL_id);
});

// Create MAL Entry's Florida Statue Service
router.post('/create/statue/:MAL_id', ensureReadOnlyMAL, function (req, res, next) {
    const {
        StatueStatusPurchase,
        StatueRequestedDate,
        StatueQuantity,
        StatueWhichBook,
        StatueReferralSource,
        StatueReferralSourceOther,
        StatueSoldBy,
        StatueDeliveryMethod,
        StatuePaymentMethod,
        StatueCheckNumber,
    } = req.body;
    //
    var entryFloridaStatue = {
        MALrelatedID: req.params.MAL_id,
        statuePurchaseStatus:StatueStatusPurchase,
        dateRequested:StatueRequestedDate,
        quantity:StatueQuantity,
        whichBook:StatueWhichBook,
        referralSource:StatueReferralSource,
        referralSourceOther:StatueReferralSourceOther,
        soldBy:StatueSoldBy,
        deliveryMethod:StatueDeliveryMethod,
        paymentMethod:StatuePaymentMethod,
        checkNumber:StatueCheckNumber,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryFloridaStatue)){
        if (entryFloridaStatue[key] == '') {
            entryFloridaStatue[key] = null;
        }
    }
    // Create new update record
    MerchandiseFloridaStatue.create(entryFloridaStatue)
        .catch(err => {
            console.log(err);
            // TODO: Replace "mal_SupplementalAssociationInfo" with proper table name
            req.flash('failure','New MAL entry\'s *mal_SupplementalAssociationInfo* record not added.');
        });

    res.redirect("../../entry/" + req.params.MAL_id);
});
// Update MAL Entry's Florida Statue Service
router.post('/entry/statue/:MAL_id/:Stat_id', ensureReadOnlyMAL, async function (req, res, next) {
    const {
        StatueStatusPurchase,
        StatueRequestedDate,
        StatueQuantity,
        StatueWhichBook,
        StatueReferralSource,
        StatueReferralSourceOther,
        StatueSoldBy,
        StatueDeliveryMethod,
        StatuePaymentMethod,
        StatueCheckNumber,
    } = req.body;
    //
    var entryFloridaStatue = {
        statuePurchaseStatus:StatueStatusPurchase,
        dateRequested:StatueRequestedDate,
        quantity:StatueQuantity,
        whichBook:StatueWhichBook,
        referralSource:StatueReferralSource,
        referralSourceOther:StatueReferralSourceOther,
        soldBy:StatueSoldBy,
        deliveryMethod:StatueDeliveryMethod,
        paymentMethod:StatuePaymentMethod,
        checkNumber:StatueCheckNumber,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryFloridaStatue)){
        if (entryFloridaStatue[key] == '') {
            entryFloridaStatue[key] = null;
        }
    }
    // update record
    await MerchandiseFloridaStatue.update(entryFloridaStatue, {where: {id:req.params.Stat_id}})
        .catch(err => {
            console.log(err);
            req.flash('failure','Update MAL entry\'s *mal_SupplementalAssociationInfo* record failed.');
        });

    res.redirect("../../entry/" + req.params.MAL_id);
});



// Social Media Section --------------------------------------
// Update MAL Entry's Social Media
router.post('/entry/social/:id', upload.array(), ensureReadOnlyMAL, async function (req, res, next) {
    // Retrieve associated element values from page & structure them
    const {
        SocialNoSocialMedia,
        SocialHasFacebook,
        SocialFacebookAccount,
        SocialFacebookDate,
        SocialHasLinkedin,
        SocialLinkedinAccount,
        SocialLinkedinDate,
        SocialHasTwitter,
        SocialTwitterAccount,
        SocialTwitterDate,
        SocialHasInstagram,
        SocialInstagramAccount,
        SocialInstagramDate,
    } = req.body;
    // Update MAL entry with object data
    await SocialMedia.update(
        {
            noSocialMedia:SocialNoSocialMedia,
            hasFacebook:SocialHasFacebook,
            facebookAccount:SocialFacebookAccount,
            facebookDate:SocialFacebookDate,
            hasLinkedin:SocialHasLinkedin,
            linkedinAccount:SocialLinkedinAccount,
            linkedinDate:SocialLinkedinDate,
            hasTwitter:SocialHasTwitter,
            twitterAccount:SocialTwitterAccount,
            twitterDate:SocialTwitterDate,
            hasInstagram:SocialHasInstagram,
            instagramAccount:SocialInstagramAccount,
            instagramDate:SocialInstagramDate,
        },
        {where: {id:req.params.id}}
    )
    .catch(err => {
        console.log(err);
        req.flash('failure','Failed to update MAL entry\'s mal_SocialMedia.model.js');
    });

    res.redirect("../../entry/" + req.params.id);
});



// Management Information Section --------------------------------------
// Create MAL Entry's General Management Information
// router.post('', ensureReadOnlyMAL, function (req, res, next) {
//
//
//     res.redirect("../../entry/" + req.params.MAL_id);
// });
// Update MAL Entry's General Management Information
// router.post('', ensureReadOnlyMAL, function (req, res, next) {
//
//
//     res.redirect("../../entry/" + req.params.MAL_id);
// });



// Hiring/Termination Section --------------------------------------
// Create MAL Entry's Hiring Information
router.post('/create/hiring/:MAL_id', ensureReadOnlyMAL, function (req, res, next) {
    const {
        HiringDateHired,
        HiringReasonsHired,
        HiringComments,
        HiringTypeofRepresentation,
        HiringDate,
        HiringSourceOfReferralName,
        HiringPosition,
        HiringCompanyAssociation,
        HiringPrimaryFirm,
        HiringOtherFirms,
        HiringForWhatPurpose,
        HiringFormerFirm,
    } = req.body;
    //
    var entryHiring = {
        MALrelatedID: req.params.MAL_id,
        dateHired:HiringDateHired,
        reasonsHired:HiringReasonsHired,
        hiringComments:HiringComments,
        typeofRepresentation:HiringTypeofRepresentation,
        date:HiringDate,
        sourceOfReferralName:HiringSourceOfReferralName,
        position:HiringPosition,
        companyAssociation:HiringCompanyAssociation,
        primaryFirm:HiringPrimaryFirm,
        otherFirms:HiringOtherFirms,
        forWhatPurpose:HiringForWhatPurpose,
        formerFirm:HiringFormerFirm,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryHiring)){
        if (entryHiring[key] == '') {
            entryHiring[key] = null;
        }
    }
    // Create new update record
    HiringRecord.create(entryHiring)
        .catch(err => {
            console.log(err);
            req.flash('failure','New MAL entry\'s *mal_HiringRecord* record not added.');
        });

    res.redirect("../../entry/" + req.params.MAL_id);
});
// Update MAL Entry's Hiring Information
router.post('/entry/hiring/:MAL_id/:Hire_id', ensureReadOnlyMAL, async function (req, res, next) {
    const {
        HiringDateHired,
        HiringReasonsHired,
        HiringComments,
        HiringTypeofRepresentation,
        HiringDate,
        HiringSourceOfReferralName,
        HiringPosition,
        HiringCompanyAssociation,
        HiringPrimaryFirm,
        HiringOtherFirms,
        HiringForWhatPurpose,
        HiringFormerFirm,
    } = req.body;
    //
    var entryHiring = {
        dateHired:HiringDateHired,
        reasonsHired:HiringReasonsHired,
        hiringComments:HiringComments,
        typeofRepresentation:HiringTypeofRepresentation,
        date:HiringDate,
        sourceOfReferralName:HiringSourceOfReferralName,
        position:HiringPosition,
        companyAssociation:HiringCompanyAssociation,
        primaryFirm:HiringPrimaryFirm,
        otherFirms:HiringOtherFirms,
        forWhatPurpose:HiringForWhatPurpose,
        formerFirm:HiringFormerFirm,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryHiring)){
        if (entryHiring[key] == '') {
            entryHiring[key] = null;
        }
    }
    // update record
    await HiringRecord.update(entryHiring, {where: {id:req.params.Hire_id}})
        .catch(err => {
            console.log(err);
            req.flash('failure','Update MAL entry\'s *mal_HiringRecord* record failed.');
        });

    res.redirect("../../entry/" + req.params.MAL_id);
});
// Create MAL Entry's Termination Information
router.post('/create/termination/:MAL_id', ensureReadOnlyMAL, function (req, res, next) {
    const {
        TerminationDateTerminated,
        TerminationReasonTerminated,
        TerminationRevenueGenerated,
        TerminationTerminatingNotes,
        TerminationOrigin,
        TerminationRealReasonTerminated,
    } = req.body;
    //
    var entryTermination = {
        MALrelatedID: req.params.MAL_id,
        dateTerminated:TerminationDateTerminated,
        reasonTerminated:TerminationReasonTerminated,
        revenueGenerated:TerminationRevenueGenerated,
        terminatingNotes:TerminationTerminatingNotes,
        terminationOrigin:TerminationOrigin,
        realReasonTerminated:TerminationRealReasonTerminated,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryTermination)){
        if (entryTermination[key] == '') {
            entryTermination[key] = null;
        }
    }
    // Create new update record
    TerminationRecord.create(entryTermination)
        .catch(err => {
            console.log(err);
            req.flash('failure','New MAL entry\'s *mal_TerminationRecord* record not added.');
        });

    res.redirect("../../entry/" + req.params.MAL_id);
});
// Update MAL MAL Entry's Termination Information
router.post('/entry/termination/:MAL_id/:Term_id', ensureReadOnlyMAL, async function (req, res, next) {
    const {
        TerminationDateTerminated,
        TerminationReasonTerminated,
        TerminationRevenueGenerated,
        TerminationTerminatingNotes,
        TerminationOrigin,
        TerminationRealReasonTerminated,
    } = req.body;
    //
    var entryTermination = {
        dateTerminated:TerminationDateTerminated,
        reasonTerminated:TerminationReasonTerminated,
        revenueGenerated:TerminationRevenueGenerated,
        terminatingNotes:TerminationTerminatingNotes,
        terminationOrigin:TerminationOrigin,
        realReasonTerminated:TerminationRealReasonTerminated,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryTermination)){
        if (entryTermination[key] == '') {
            entryTermination[key] = null;
        }
    }
    // update record
    await TerminationRecord.update(entryTermination, {where: {id:req.params.Term_id}})
        .catch(err => {
            console.log(err);
            req.flash('failure','Update MAL entry\'s *mal_TerminationRecord* record failed.');
        });

    res.redirect("../../entry/" + req.params.MAL_id);
});



// Referrals Section --------------------------------------
// Create MAL Entry's Source of Referral to C&M
router.post('/create/source/:MAL_id', ensureReadOnlyMAL, function (req, res, next) {
    // Replace empty string values with null
    for (var key in req.body) {
        if (req.body[key] == '') {
            req.body[key] = null;
        }
    }
    const {
        SourceDate,
        SourceReferredBy,
        SourcePosition,
        SourceCompany,
        SourceIfOrganizationMeeting,
    } = req.body;
    //
    var entryRefSource = {
        MALrelatedID: req.params.MAL_id,
        date:SourceDate,
        referredBy:SourceReferredBy,
        position:SourcePosition,
        company:SourceCompany,
        ifOrganizationMeeting:SourceIfOrganizationMeeting,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryRefSource)){
        if (entryRefSource[key] == '') {
            entryRefSource[key] = null;
        }
    }
    // Create new update record
    ReferralSource.create(entryRefSource)
        .catch(err => {
            console.log(err);
            req.flash('failure','MAL entry\'s *mal_ReferralSource* record not added.');
        });

    res.redirect("../../entry/" + req.params.MAL_id);
});
// Update MAL Entry's Source of Referral to C&M
router.post('/entry/source/:MAL_id/:Src_id', ensureReadOnlyMAL, async function (req, res, next) {
    let {
        SourceDate,
        SourceReferredBy,
        SourcePosition,
        SourceCompany,
        SourceIfOrganizationMeeting,
    } = req.body;

    // Replace all empty string values with NULL
    for (let key of Object.keys(req.body)){
        if (req.body[key] == '') {
            req.body[key] = null;
        }
    }
    // Update MAL entry with object data
    await ReferralSource.update(
        {
            date:SourceDate,
            referredBy:SourceReferredBy,
            position:SourcePosition,
            company:SourceCompany,
            ifOrganizationMeeting:SourceIfOrganizationMeeting,
        },
        {where: {id:req.params.Src_id}}
    )
    .catch(err => {
        console.log(err);
        req.flash('failure','Failed to update MAL entry\'s mal_ReferralSource.model.js');
    });

    res.redirect("../../../entry/" + req.params.MAL_id);
});

// Create MAL Entry's Referrals from C&M for Mgmt. Co./Vendors
router.post('/create/referral/:MAL_id', ensureReadOnlyMAL, function (req, res, next) {
    // Replace empty string values with null
    for (var key in req.body) {
        if (req.body[key] == '') {
            req.body[key] = null;
        }
    }
    const {
        MgmtRequestDate,
        MgmtRequestedBy,
        MgmtTitle,
        MgmtForWhatBusiness,
    } = req.body;
    //
    var entryRefMgmt = {
        MALrelatedID: req.params.MAL_id,
        requestDate:MgmtRequestDate,
        requestedBy:MgmtRequestedBy,
        title:MgmtTitle,
        forWhatBusiness:MgmtForWhatBusiness,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryRefMgmt)){
        if (entryRefMgmt[key] == '') {
            entryRefMgmt[key] = null;
        }
    }
    // Create new update record
    ReferralMgmtCoVendor.create(entryRefMgmt)
        .catch(err => {
            console.log(err);
            req.flash('failure','New MAL entry\'s *mal_ReferralMgmtCoVendor* record not added.');
    });

    res.redirect("../../entry/" + req.params.MAL_id);
});
// Update MAL MAL Entry's Referrals from C&M for Mgmt. Co./Vendors
router.post('/entry/referral/:MAL_id/:Ref_id', ensureReadOnlyMAL, async function (req, res, next) {
    let {
        MgmtRequestDate,
        MgmtRequestedBy,
        MgmtTitle,
        MgmtForWhatBusiness,
    } = req.body;

    // Replace all empty string values with NULL
    for (let key of Object.keys(req.body)){
        if (req.body[key] == '') {
            req.body[key] = null;
        }
    }
    // Update MAL entry with object data
    await ReferralMgmtCoVendor.update(
        {
            requestDate:MgmtRequestDate,
            requestedBy:MgmtRequestedBy,
            title:MgmtTitle,
            forWhatBusiness:MgmtForWhatBusiness,
        },
        {where: {id:req.params.Ref_id}}
    )
    .catch(err => {
        console.log(err);
        req.flash('failure','Failed to update MAL entry\'s mal_ReferralMgmtCoVendor.model.js');
    });

    res.redirect("../../../entry/" + req.params.MAL_id);
});





// Presentation Information Section --------------------------------------
// Create MAL Entry's Presentation Information
router.post('/create/presentation/:MAL_id', ensureReadOnlyMAL, function (req, res, next) {
    // Replace empty string values with null
    for (var key in req.body) {
        if (req.body[key] == '') {
            req.body[key] = null;
        }
    }
    const {
        PresentationDate,
        PresentationRequestedBy,
        PresentationPosition,
        PresentationPrimaryAttorney,
        PresentationStaffMemberAttending,
        PresentationLocation,
        PresentationMgmtCoAndOffice,
        PresentationMethod,
        PresentationWhoAttendedFromAssociation,
        PresentationIssuesDiscussed,
        PresentationTotalPresentationTime,
        PresentationOutcome,
        PresentationHired,
        PresentationReasonsFirmSelected,
    } = req.body;
    //
    var entryPresentation = {
        MALrelatedID: req.params.MAL_id,
        date:PresentationDate,
        requestedBy:PresentationRequestedBy,
        position:PresentationPosition,
        primaryAttorney:PresentationPrimaryAttorney,
        staffMemberAttending:PresentationStaffMemberAttending,
        location:PresentationLocation,
        mgmtCoAndOffice:PresentationMgmtCoAndOffice,
        method:PresentationMethod,
        whoAttendedFromAssociation:PresentationWhoAttendedFromAssociation,
        issuesDiscussed:PresentationIssuesDiscussed,
        totalPresentationTime:PresentationTotalPresentationTime,
        outcome:PresentationOutcome,
        hired:PresentationHired,
        reasonsFirmSelected:PresentationReasonsFirmSelected,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryPresentation)){
        if (entryPresentation[key] == '') {
            entryPresentation[key] = null;
        }
    }
    // Create new update record
    Presentations.create(entryPresentation)
        .catch(err => {
            console.log(err);
            req.flash('failure','New MAL entry\'s *mal_Presentations* record not added.');
    });

    res.redirect("../../entry/" + req.params.MAL_id);
});
// Update MAL Entry's Presentation Information
router.post('/entry/presentation/:MAL_id/:Pre_id', ensureReadOnlyMAL, async function (req, res, next) {
    let {
        PresentationDate,
        PresentationRequestedBy,
        PresentationPosition,
        PresentationPrimaryAttorney,
        PresentationStaffMemberAttending,
        PresentationLocation,
        PresentationMgmtCoAndOffice,
        PresentationMethod,
        PresentationWhoAttendedFromAssociation,
        PresentationIssuesDiscussed,
        PresentationTotalPresentationTime,
        PresentationOutcome,
        PresentationHired,
        PresentationReasonsFirmSelected,
    } = req.body;

    // Replace all empty string values with NULL
    for (let key of Object.keys(req.body)){
        if (req.body[key] == '') {
            req.body[key] = null;
        }
    }
    // Update MAL entry with object data
    await Presentations.update(
        {
            date:PresentationDate,
            requestedBy:PresentationRequestedBy,
            position:PresentationPosition,
            primaryAttorney:PresentationPrimaryAttorney,
            staffMemberAttending:PresentationStaffMemberAttending,
            location:PresentationLocation,
            mgmtCoAndOffice:PresentationMgmtCoAndOffice,
            method:PresentationMethod,
            whoAttendedFromAssociation:PresentationWhoAttendedFromAssociation,
            issuesDiscussed:PresentationIssuesDiscussed,
            totalPresentationTime:PresentationTotalPresentationTime,
            outcome:PresentationOutcome,
            hired:PresentationHired,
            reasonsFirmSelected:PresentationReasonsFirmSelected,
        },
        {where: {id:req.params.Pre_id}}
    )
    .catch(err => {
        console.log(err);
        req.flash('failure','Failed to update MAL entry\'s mal_Presentations.model.js');
    });

    res.redirect("../../../entry/" + req.params.MAL_id);
});



// Potential Client Status Report --------------------------------------
// Create MAL Entry's Potential Client Status Report
router.post('/create/potential/:MAL_id', ensureReadOnlyMAL, function (req, res, next) {
    // Replace empty string values with null
    for (var key in req.body) {
        if (req.body[key] == '') {
            req.body[key] = null;
        }
    }
    const {
        PotentialOriginationDatePC,
        PotentialStaffInitialsPC,
        PotentialStaffAssignedPC,
        PotentialNewestEventDate,
        PotentialStaffInitialsEvent,
        PotentialFollowUpType,
        PotentialNextFollowUpDate,
        PotentialStaffInitialsFollowUp,
        PotentialFileType,
        PotentialFileDate,
        PotentialContactName,
        PotentialPosition,
        PotentialPhoneNumber,
        PotentialExtension,
        PotentialInfoNote,
        PotentialCurrentLegalCouncil,
        PotentialOtherFirmsConsidered,
        PotentialReasonForLeavingCurrent,
        PotentialBestAspectCurrent,
        PotentialDecisionExpected,
        PotentialDecisionBasis,
        PotentialSincereRequest3rdParty,
        PotentialCMNotifiedOnDecision,
        PotentialCurrentFirmSelection,
        PotentialAssociationHeardCM,
        PotentialWhatEvent,
        PotentialPackageTypeRequested,
        PotentialCopyToName,
        PotentialTitle,
        PotentialMgmtCo,
        PotentialCopyDate,
        PotentialEventsChain,
        PotentialChainDate,
        PotentialChainOriginator,
        PotentialChainInitials,
        PotentialChainInputDate,
        PotentialEntryTotalTime,
        PotentialEntryNotes,
        PotentialFileClosingStatus,
        PotentialFileClosingDate,
        PotentialFileRemoveAfter,
        PotentialClosedFileStatus,
        PotentialStartingRoundDate,
        PotentialEndingDate,
        PotentialClosingDate,
        PotentialSpentTotalTime,
        PotentialFirmSelected,
        PotentialFirmSelectedOtherWhy,
        PotentialOtherFirmAdditionalReasons,
        PotentialClosingLetter,
        PotentialFinalStaffThoughts,
    } = req.body;
    //
    var entryPotential = {
        MALrelatedID: req.params.MAL_id,
        originationDatePC:PotentialOriginationDatePC,
        staffInitialsPC:PotentialStaffInitialsPC,
        staffAssignedPC:PotentialStaffAssignedPC,
        newestEventDate:PotentialNewestEventDate,
        staffInitialsEvent:PotentialStaffInitialsEvent,
        followUpType:PotentialFollowUpType,
        nextFollowUpDate:PotentialNextFollowUpDate,
        staffInitialsFollowUp:PotentialStaffInitialsFollowUp,
        fileType:PotentialFileType,
        fileDate:PotentialFileDate,
        contactName:PotentialContactName,
        position:PotentialPosition,
        phoneNumber:PotentialPhoneNumber,
        extension:PotentialExtension,
        infoNote:PotentialInfoNote,
        currentLegalCouncil:PotentialCurrentLegalCouncil,
        otherFirmsConsidered:PotentialOtherFirmsConsidered,
        reasonForLeavingCurrent:PotentialReasonForLeavingCurrent,
        bestAspectCurrent:PotentialBestAspectCurrent,
        decisionExpected:PotentialDecisionExpected,
        decisionBasis:PotentialDecisionBasis,
        sincereRequest3rdParty:PotentialSincereRequest3rdParty,
        CMNotifiedOnDecision:PotentialCMNotifiedOnDecision,
        currentFirmSelection:PotentialCurrentFirmSelection,
        associationHeardCM:PotentialAssociationHeardCM,
        whatEvent:PotentialWhatEvent,
        packageTypeRequested:PotentialPackageTypeRequested,
        copyToName:PotentialCopyToName,
        title:PotentialTitle,
        mgmtCo:PotentialMgmtCo,
        copyDate:PotentialCopyDate,
        eventsChain:PotentialEventsChain,
        chainDate:PotentialChainDate,
        chainOriginator:PotentialChainOriginator,
        chainInitials:PotentialChainInitials,
        chainInputDate:PotentialChainInputDate,
        entryTotalTime:PotentialEntryTotalTime,
        entryNotes:PotentialEntryNotes,
        fileClosingStatus:PotentialFileClosingStatus,
        fileClosingDate:PotentialFileClosingDate,
        fileRemoveAfter:PotentialFileRemoveAfter,
        closedFileStatus:PotentialClosedFileStatus,
        startingRoundDate:PotentialStartingRoundDate,
        endingDate:PotentialEndingDate,
        closingDate:PotentialClosingDate,
        spentTotalTime:PotentialSpentTotalTime,
        firmSelected:PotentialFirmSelected,
        firmSelectedOtherWhy:PotentialFirmSelectedOtherWhy,
        otherFirmAdditionalReasons:PotentialOtherFirmAdditionalReasons,
        closingLetter:PotentialClosingLetter,
        finalStaffThoughts:PotentialFinalStaffThoughts,
    };
    // Replace all empty string values with NULL
    for (let key of Object.keys(entryPotential)){
        if (entryPotential[key] == '') {
            entryPotential[key] = null;
        }
    }
    // Create new update record
    PotentialClientReports.create(entryPotential)
        .catch(err => {
            console.log(err);
            req.flash('failure','New MAL entry\'s *mal_PotentialClientReports* record not added.');
    });

    res.redirect("../../entry/" + req.params.MAL_id);
});
// Update MAL Entry's Potential Client Status Report
router.post('/entry/potential/:MAL_id/:Pot_id', ensureReadOnlyMAL, async function (req, res, next) {
    let {
        PotentialOriginationDatePC,
        PotentialStaffInitialsPC,
        PotentialStaffAssignedPC,
        PotentialNewestEventDate,
        PotentialStaffInitialsEvent,
        PotentialFollowUpType,
        PotentialNextFollowUpDate,
        PotentialStaffInitialsFollowUp,
        PotentialFileType,
        PotentialFileDate,
        PotentialContactName,
        PotentialPosition,
        PotentialPhoneNumber,
        PotentialExtension,
        PotentialInfoNote,
        PotentialCurrentLegalCouncil,
        PotentialOtherFirmsConsidered,
        PotentialReasonForLeavingCurrent,
        PotentialBestAspectCurrent,
        PotentialDecisionExpected,
        PotentialDecisionBasis,
        PotentialSincereRequest3rdParty,
        PotentialCMNotifiedOnDecision,
        PotentialCurrentFirmSelection,
        PotentialAssociationHeardCM,
        PotentialWhatEvent,
        PotentialPackageTypeRequested,
        PotentialCopyToName,
        PotentialTitle,
        PotentialMgmtCo,
        PotentialCopyDate,
        PotentialEventsChain,
        PotentialChainDate,
        PotentialChainOriginator,
        PotentialChainInitials,
        PotentialChainInputDate,
        PotentialEntryTotalTime,
        PotentialEntryNotes,
        PotentialFileClosingStatus,
        PotentialFileClosingDate,
        PotentialFileRemoveAfter,
        PotentialClosedFileStatus,
        PotentialStartingRoundDate,
        PotentialEndingDate,
        PotentialClosingDate,
        PotentialSpentTotalTime,
        PotentialFirmSelected,
        PotentialFirmSelectedOtherWhy,
        PotentialOtherFirmAdditionalReasons,
        PotentialClosingLetter,
        PotentialFinalStaffThoughts,
    } = req.body;

    // Replace all empty string values with NULL
    for (let key of Object.keys(req.body)){
        if (req.body[key] == '') {
            req.body[key] = null;
        }
    }
    // Update MAL entry with object data
    await PotentialClientReports.update(
        {
            originationDatePC:PotentialOriginationDatePC,
            staffInitialsPC:PotentialStaffInitialsPC,
            staffAssignedPC:PotentialStaffAssignedPC,
            newestEventDate:PotentialNewestEventDate,
            staffInitialsEvent:PotentialStaffInitialsEvent,
            followUpType:PotentialFollowUpType,
            nextFollowUpDate:PotentialNextFollowUpDate,
            staffInitialsFollowUp:PotentialStaffInitialsFollowUp,
            fileType:PotentialFileType,
            fileDate:PotentialFileDate,
            contactName:PotentialContactName,
            position:PotentialPosition,
            phoneNumber:PotentialPhoneNumber,
            extension:PotentialExtension,
            infoNote:PotentialInfoNote,
            currentLegalCouncil:PotentialCurrentLegalCouncil,
            otherFirmsConsidered:PotentialOtherFirmsConsidered,
            reasonForLeavingCurrent:PotentialReasonForLeavingCurrent,
            bestAspectCurrent:PotentialBestAspectCurrent,
            decisionExpected:PotentialDecisionExpected,
            decisionBasis:PotentialDecisionBasis,
            sincereRequest3rdParty:PotentialSincereRequest3rdParty,
            CMNotifiedOnDecision:PotentialCMNotifiedOnDecision,
            currentFirmSelection:PotentialCurrentFirmSelection,
            associationHeardCM:PotentialAssociationHeardCM,
            whatEvent:PotentialWhatEvent,
            packageTypeRequested:PotentialPackageTypeRequested,
            copyToName:PotentialCopyToName,
            title:PotentialTitle,
            mgmtCo:PotentialMgmtCo,
            copyDate:PotentialCopyDate,
            eventsChain:PotentialEventsChain,
            chainDate:PotentialChainDate,
            chainOriginator:PotentialChainOriginator,
            chainInitials:PotentialChainInitials,
            chainInputDate:PotentialChainInputDate,
            entryTotalTime:PotentialEntryTotalTime,
            entryNotes:PotentialEntryNotes,
            fileClosingStatus:PotentialFileClosingStatus,
            fileClosingDate:PotentialFileClosingDate,
            fileRemoveAfter:PotentialFileRemoveAfter,
            closedFileStatus:PotentialClosedFileStatus,
            startingRoundDate:PotentialStartingRoundDate,
            endingDate:PotentialEndingDate,
            closingDate:PotentialClosingDate,
            spentTotalTime:PotentialSpentTotalTime,
            firmSelected:PotentialFirmSelected,
            firmSelectedOtherWhy:PotentialFirmSelectedOtherWhy,
            otherFirmAdditionalReasons:PotentialOtherFirmAdditionalReasons,
            closingLetter:PotentialClosingLetter,
            finalStaffThoughts:PotentialFinalStaffThoughts,
        },
        {where: {id:req.params.Pot_id}}
    )
    .catch(err => {
        console.log(err);
        req.flash('failure','Failed to update MAL entry\'s mal_PotentialClientReports.model.js');
    });

    res.redirect("../../../entry/" + req.params.MAL_id);
});



// --------------------------------------------------------------------------------------------------------------------------------------------------------
// Function to convert dates retrieved from views to MySQL date datatype
// This function is currently not in use
// function databaseDate(dateVal) {
//     if (dateVal == null) {
//         return null;
//     }
//     temp = new Date(dateVal);
//     // Return justy YYYY-MM-DD
//     return temp.toISOString().substring(0,10);
// }

module.exports = router;
